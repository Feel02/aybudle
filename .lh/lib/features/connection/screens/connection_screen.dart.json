{
    "sourceFile": "lib/features/connection/screens/connection_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1742223468248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1742224943442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n                             _showChoiceDialog(context, viewModel.url);\r\n                           } else {\r\n                             ScaffoldMessenger.of(context).showSnackBar(\r\n                               const SnackBar(\r\n-                                  content: Text('Invalid URL or connection failed')),\r\n+                                    content: Text(AppConstants.invalidUrlText)),\r\n                             );\r\n                           }\r\n                         },\r\n                   child: const Text(AppConstants.connectButtonText),\r\n"
                },
                {
                    "date": 1742224954440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,9 @@\n                   controller: urlController,\r\n                 ),\r\n                 const SizedBox(height: 10),\r\n                 CheckboxListTile(\r\n-                  title: const Text(\"Remember Site\"),\r\n+                  title: const Text(AppConstants.rememberMeText),\r\n                   value: viewModel.rememberSite,\r\n                   onChanged: viewModel.toggleRememberSite,\r\n                   controlAffinity: ListTileControlAffinity.leading,\r\n                 ),\r\n"
                }
            ],
            "date": 1742223468248,
            "name": "Commit-0",
            "content": "import 'package:aybudle/core/constants/app_constants.dart';\r\nimport 'package:aybudle/features/connection/screens/login_screen.dart';\r\nimport 'package:aybudle/features/connection/screens/webview_screen.dart';\r\nimport 'package:aybudle/features/connection/view_models/connection_view_model.dart';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:provider/provider.dart';\r\n\r\nclass ConnectionScreen extends StatelessWidget {\r\n  const ConnectionScreen({super.key});\r\n\r\n  void _showChoiceDialog(BuildContext context, String url) {\r\n    showDialog(\r\n      context: context,\r\n      builder: (context) {\r\n        return AlertDialog(\r\n          title: const Text(\"Choose Option\"),\r\n          content: const Text(\"Do you want to open the URL directly or use the app login?\"),\r\n          actions: [\r\n            TextButton(\r\n              onPressed: () {\r\n                // Option: Open URL directly (e.g., in WebView)\r\n                Navigator.pop(context); // Close dialog\r\n                Navigator.push(\r\n                  context,\r\n                  MaterialPageRoute(\r\n                    builder: (_) => WebViewScreen(url: url),\r\n                  ),\r\n                );\r\n              },\r\n              child: const Text(\"Open URL\"),\r\n            ),\r\n            TextButton(\r\n              onPressed: () {\r\n                // Option: Open in App (go to login)\r\n                Navigator.pop(context); // Close dialog\r\n                Navigator.push(\r\n                  context,\r\n                  MaterialPageRoute(\r\n                    builder: (_) => LoginScreen(baseUrl: url),\r\n                  ),\r\n                );\r\n              },\r\n              child: const Text(\"Open in App\"),\r\n            ),\r\n          ],\r\n        );\r\n      },\r\n    );\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: AppBar(title: const Text(AppConstants.appName)),\r\n      body: Padding(\r\n        padding: const EdgeInsets.all(16.0),\r\n        child: Consumer<ConnectionViewModel>(\r\n          builder: (context, viewModel, _) {\r\n            // Use a TextEditingController that persists state if needed.\r\n            final urlController = TextEditingController(text: viewModel.url);\r\n            return Column(\r\n              children: [\r\n                TextField(\r\n                  decoration: const InputDecoration(\r\n                    labelText: AppConstants.urlHintText,\r\n                    border: OutlineInputBorder(),\r\n                  ),\r\n                  onChanged: viewModel.setUrl,\r\n                  keyboardType: TextInputType.url,\r\n                  controller: urlController,\r\n                ),\r\n                const SizedBox(height: 10),\r\n                CheckboxListTile(\r\n                  title: const Text(\"Remember Site\"),\r\n                  value: viewModel.rememberSite,\r\n                  onChanged: viewModel.toggleRememberSite,\r\n                  controlAffinity: ListTileControlAffinity.leading,\r\n                ),\r\n                const SizedBox(height: 10),\r\n                ElevatedButton(\r\n                  onPressed: viewModel.isLoading\r\n                      ? null\r\n                      : () async {\r\n                          // Validate the URL connection first.\r\n                          if (await viewModel.connectToSite()) {\r\n                            // Instead of directly navigating to the login screen,\r\n                            // show a dialog for the user to choose the desired action.\r\n                            _showChoiceDialog(context, viewModel.url);\r\n                          } else {\r\n                            ScaffoldMessenger.of(context).showSnackBar(\r\n                              const SnackBar(\r\n                                  content: Text('Invalid URL or connection failed')),\r\n                            );\r\n                          }\r\n                        },\r\n                  child: const Text(AppConstants.connectButtonText),\r\n                ),\r\n                if (viewModel.isLoading) ...[\r\n                  const SizedBox(height: 20),\r\n                  const CircularProgressIndicator(),\r\n                ]\r\n              ],\r\n            );\r\n          },\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}