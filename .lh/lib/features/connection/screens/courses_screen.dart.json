{
    "sourceFile": "lib/features/connection/screens/courses_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 17,
            "patches": [
                {
                    "date": 1742225256900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1742225632937,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n     fetchAllCoursesAndDetails();\r\n   }\r\n \r\n   Future<void> fetchAllCoursesAndDetails() async {\r\n-    final String serverUrl = '${widget.baseUrl}/moodle/webservice/rest/server.php';\r\n+    final String serverUrl = '${widget.baseUrl}/webservice/rest/server.php';\r\n     print(\"ADNJLJSJVJSKDJVLSDJKVSDLJVSKLDJVD\");\r\n     print(serverUrl);\r\n     try {\r\n       // 1. Fetch enrolled courses\r\n"
                },
                {
                    "date": 1742226250378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n       final coursesResponse = await _dio.get(\r\n         serverUrl,\r\n         queryParameters: {\r\n           'wstoken': widget.token,\r\n-          'wsfunction': 'core_enrol_get_users_courses',\r\n+          'wsfunction': 'core_course_get_courses',\r\n           'moodlewsrestformat': 'json',\r\n         },\r\n       );\r\n \r\n"
                },
                {
                    "date": 1742226871285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n       final coursesResponse = await _dio.get(\r\n         serverUrl,\r\n         queryParameters: {\r\n           'wstoken': widget.token,\r\n-          'wsfunction': 'core_course_get_courses',\r\n+          'wsfunction': 'enrol_get_users_courses',\r\n           'moodlewsrestformat': 'json',\r\n         },\r\n       );\r\n \r\n"
                },
                {
                    "date": 1742227142446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n       final coursesResponse = await _dio.get(\r\n         serverUrl,\r\n         queryParameters: {\r\n           'wstoken': widget.token,\r\n-          'wsfunction': 'enrol_get_users_courses',\r\n+          'wsfunction': 'core_webservice_get_site_info',\r\n           'moodlewsrestformat': 'json',\r\n         },\r\n       );\r\n \r\n"
                },
                {
                    "date": 1742227664798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,47 +33,35 @@\n     final String serverUrl = '${widget.baseUrl}/webservice/rest/server.php';\r\n     print(\"ADNJLJSJVJSKDJVLSDJKVSDLJVSKLDJVD\");\r\n     print(serverUrl);\r\n     try {\r\n-      // 1. Fetch enrolled courses\r\n-      final coursesResponse = await _dio.get(\r\n+      // 1. Fetch user informations\r\n+      final userResponse = await _dio.get(\r\n         serverUrl,\r\n         queryParameters: {\r\n           'wstoken': widget.token,\r\n           'wsfunction': 'core_webservice_get_site_info',\r\n           'moodlewsrestformat': 'json',\r\n         },\r\n       );\r\n \r\n+      print('--- Raw user response ---');\r\n+      print(userResponse.data);\r\n+      \r\n+      // 2. Get the course informations with the userResponse\r\n+      final coursesResponse = await _dio.get(\r\n+        serverUrl,\r\n+        queryParameters: {\r\n+          'wstoken': widget.token,\r\n+          'wsfunction': 'core_enrol_get_users_courses',\r\n+          'moodlewsrestformat': 'json',\r\n+          'userid': userResponse.data['userid'],\r\n+        },\r\n+      );\r\n+\r\n       print('--- Raw courses response ---');\r\n       print(coursesResponse.data);\r\n-      List<dynamic> coursesList;\r\n \r\n-      // Check the type of coursesResponse.data\r\n-      if (coursesResponse.data is List) {\r\n-        coursesList = coursesResponse.data as List;\r\n-      } else if (coursesResponse.data is Map<String, dynamic>) {\r\n-        // Log error message if it's an error map\r\n-        print('Courses API returned a Map instead of a List:');\r\n-        print(coursesResponse.data);\r\n-        setState(() {\r\n-          _isLoading = false;\r\n-        });\r\n-        return;\r\n-      } else {\r\n-        print('Unexpected courses API response type: ${coursesResponse.data.runtimeType}');\r\n-        setState(() {\r\n-          _isLoading = false;\r\n-        });\r\n-        return;\r\n-      }\r\n-\r\n-      // Log found course IDs\r\n-      print('Found ${coursesList.length} courses.');\r\n-      for (var course in coursesList) {\r\n-        print('Course ID: ${course['id']}, fullname: ${course['fullname']}');\r\n-      }\r\n-\r\n       List<Map<String, dynamic>> coursesDetails = [];\r\n \r\n       // 2. For each course, fetch course contents.\r\n       for (var course in coursesList) {\r\n"
                },
                {
                    "date": 1742227693497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,8 +60,10 @@\n \r\n       print('--- Raw courses response ---');\r\n       print(coursesResponse.data);\r\n \r\n+      List coursesList = coursesResponse.data;\r\n+\r\n       List<Map<String, dynamic>> coursesDetails = [];\r\n \r\n       // 2. For each course, fetch course contents.\r\n       for (var course in coursesList) {\r\n"
                },
                {
                    "date": 1742909672660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,8 +149,17 @@\n                       title: Text(module['name'] ?? 'Unnamed Module'),\r\n                       subtitle: Text(\r\n                         'Type: ${module['modname']}, Visible: ${module['visible']}',\r\n                       ),\r\n+                      onTap: () {\r\n+                        // Navigate to the message detail screen when tapped\r\n+                        Navigator.push(\r\n+                          context,\r\n+                          MaterialPageRoute(\r\n+                            builder: (_) => MessageDetailScreen(module: module),\r\n+                          ),\r\n+                        );\r\n+                      },\r\n                     );\r\n                   }).toList(),\r\n                 ),\r\n               );\r\n"
                },
                {
                    "date": 1742909740739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+import 'package:aybudle/features/connection/screens/message_detail_screen.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:dio/dio.dart';\r\n \r\n class CoursesScreen extends StatefulWidget {\r\n"
                },
                {
                    "date": 1742910222379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,19 +147,28 @@\n                   subtitle: Text('Section ID: ${section['id']}'),\r\n                   children: (section['modules'] as List<dynamic>).map<Widget>((module) {\r\n                     return ListTile(\r\n                       title: Text(module['name'] ?? 'Unnamed Module'),\r\n-                      subtitle: Text(\r\n-                        'Type: ${module['modname']}, Visible: ${module['visible']}',\r\n-                      ),\r\n+                      subtitle: Text('Type: ${module['modname']}, Visible: ${module['visible']}'),\r\n                       onTap: () {\r\n-                        // Navigate to the message detail screen when tapped\r\n-                        Navigator.push(\r\n-                          context,\r\n-                          MaterialPageRoute(\r\n-                            builder: (_) => MessageDetailScreen(module: module),\r\n-                          ),\r\n-                        );\r\n+                        if (module['modname'] == 'forum') {\r\n+                          // Navigate to ForumDiscussionsScreen using the token and forum id (module['instance'])\r\n+                          Navigator.push(\r\n+                            context,\r\n+                            MaterialPageRoute(\r\n+                              builder: (_) => ForumDiscussionsScreen(\r\n+                                baseUrl: widget.baseUrl,\r\n+                                token: widget.token,\r\n+                                forumId: module['instance'],\r\n+                              ),\r\n+                            ),\r\n+                          );\r\n+                        } else {\r\n+                          // For other module types, you can add similar logic or a fallback.\r\n+                          ScaffoldMessenger.of(context).showSnackBar(\r\n+                            const SnackBar(content: Text('This module type is not supported yet.')),\r\n+                          );\r\n+                        }\r\n                       },\r\n                     );\r\n                   }).toList(),\r\n                 ),\r\n"
                },
                {
                    "date": 1742910246039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import 'package:aybudle/features/connection/screens/message_detail_screen.dart';\r\n+import 'package:aybudle/features/connection/screens/forum_discussions_screen.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:dio/dio.dart';\r\n \r\n class CoursesScreen extends StatefulWidget {\r\n"
                },
                {
                    "date": 1742910366277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+import 'package:aybudle/features/connection/screens/forum_discussion_screen.dart';\r\n import 'package:aybudle/features/connection/screens/message_detail_screen.dart';\r\n import 'package:aybudle/features/connection/screens/forum_discussions_screen.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:dio/dio.dart';\r\n"
                },
                {
                    "date": 1742910373839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n import 'package:aybudle/features/connection/screens/forum_discussion_screen.dart';\r\n import 'package:aybudle/features/connection/screens/message_detail_screen.dart';\r\n-import 'package:aybudle/features/connection/screens/forum_discussions_screen.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:dio/dio.dart';\r\n \r\n class CoursesScreen extends StatefulWidget {\r\n"
                },
                {
                    "date": 1742910389275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n import 'package:aybudle/features/connection/screens/forum_discussion_screen.dart';\r\n-import 'package:aybudle/features/connection/screens/message_detail_screen.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:dio/dio.dart';\r\n \r\n class CoursesScreen extends StatefulWidget {\r\n"
                },
                {
                    "date": 1742915675515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -188,18 +188,36 @@\n   Widget build(BuildContext context) {\r\n     return Scaffold(\r\n       appBar: AppBar(\r\n         title: const Text('Courses Details'),\r\n+        leading: IconButton(\r\n+          icon: const Icon(Icons.logout),\r\n+          onPressed: () async {\r\n+            final prefs = await SharedPreferences.getInstance();\r\n+            await prefs.remove('rememberedUsername');\r\n+            await prefs.remove('rememberedPassword');\r\n+            await prefs.remove('userToken');\r\n+            // Optionally remove 'rememberedSite' if needed:\r\n+            await prefs.remove('rememberedSite');\r\n+            \r\n+            // Navigate back to the ConnectionScreen (clearing the stack)\r\n+            Navigator.of(context).pushAndRemoveUntil(\r\n+              MaterialPageRoute(builder: (_) => const ConnectionScreen()),\r\n+              (route) => false,\r\n+            );\r\n+          },\r\n+        ),\r\n       ),\r\n       body: _isLoading\r\n           ? const Center(child: CircularProgressIndicator())\r\n           : _coursesDetails.isEmpty\r\n-              ? const Center(child: Text('No courses found'))\r\n+              ? const Center(child: Text(AppConstants.noCoursesText))\r\n               : ListView.builder(\r\n                   itemCount: _coursesDetails.length,\r\n                   itemBuilder: (context, index) {\r\n                     return _buildCourseTile(_coursesDetails[index]);\r\n                   },\r\n                 ),\r\n     );\r\n   }\r\n+\r\n }\r\n"
                },
                {
                    "date": 1742915681943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import 'package:aybudle/features/connection/screens/forum_discussion_screen.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:dio/dio.dart';\r\n+import 'package:shared_preferences/shared_preferences.dart';\r\n \r\n class CoursesScreen extends StatefulWidget {\r\n   final String baseUrl;\r\n   final String token;\r\n"
                },
                {
                    "date": 1742915694253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n+import 'package:aybudle/core/constants/app_constants.dart';\r\n+import 'package:aybudle/features/connection/screens/connection_screen.dart';\r\n import 'package:aybudle/features/connection/screens/forum_discussion_screen.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:dio/dio.dart';\r\n import 'package:shared_preferences/shared_preferences.dart';\r\n"
                },
                {
                    "date": 1742916539232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -191,19 +191,28 @@\n   Widget build(BuildContext context) {\r\n     return Scaffold(\r\n       appBar: AppBar(\r\n         title: const Text('Courses Details'),\r\n+        // In your CoursesScreen's AppBar logout button:\r\n         leading: IconButton(\r\n           icon: const Icon(Icons.logout),\r\n           onPressed: () async {\r\n             final prefs = await SharedPreferences.getInstance();\r\n-            await prefs.remove('rememberedUsername');\r\n-            await prefs.remove('rememberedPassword');\r\n-            await prefs.remove('userToken');\r\n-            // Optionally remove 'rememberedSite' if needed:\r\n-            await prefs.remove('rememberedSite');\r\n+            // Check if \"Remember Me\" is enabled.\r\n+            bool rememberMe = prefs.getBool('rememberMeEnabled') ?? false;\r\n             \r\n-            // Navigate back to the ConnectionScreen (clearing the stack)\r\n+            if (!rememberMe) {\r\n+              // Clear everything if the user did NOT choose \"Remember Me\".\r\n+              await prefs.remove('rememberedUsername');\r\n+              await prefs.remove('rememberedPassword');\r\n+              await prefs.remove('rememberedSite');\r\n+            } else {\r\n+              // If \"Remember Me\" is enabled, clear only session-related data (e.g., token)\r\n+              await prefs.remove('userToken');\r\n+              // Optionally, you can update other session flags as needed.\r\n+            }\r\n+            \r\n+            // Navigate back to ConnectionScreen (clearing the navigation stack)\r\n             Navigator.of(context).pushAndRemoveUntil(\r\n               MaterialPageRoute(builder: (_) => const ConnectionScreen()),\r\n               (route) => false,\r\n             );\r\n"
                }
            ],
            "date": 1742225256900,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\r\nimport 'package:dio/dio.dart';\r\n\r\nclass CoursesScreen extends StatefulWidget {\r\n  final String baseUrl;\r\n  final String token;\r\n\r\n  const CoursesScreen({\r\n    Key? key,\r\n    required this.baseUrl,\r\n    required this.token,\r\n  }) : super(key: key);\r\n\r\n  @override\r\n  State<CoursesScreen> createState() => _CoursesScreenState();\r\n}\r\n\r\nclass _CoursesScreenState extends State<CoursesScreen> {\r\n  bool _isLoading = true;\r\n  // This will store a list of maps. Each map contains:\r\n  // 'course': the course info (Map) and 'contents': the course contents (raw response)\r\n  List<Map<String, dynamic>> _coursesDetails = [];\r\n\r\n  final Dio _dio = Dio();\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    fetchAllCoursesAndDetails();\r\n  }\r\n\r\n  Future<void> fetchAllCoursesAndDetails() async {\r\n    final String serverUrl = '${widget.baseUrl}/moodle/webservice/rest/server.php';\r\n    print(\"ADNJLJSJVJSKDJVLSDJKVSDLJVSKLDJVD\");\r\n    print(serverUrl);\r\n    try {\r\n      // 1. Fetch enrolled courses\r\n      final coursesResponse = await _dio.get(\r\n        serverUrl,\r\n        queryParameters: {\r\n          'wstoken': widget.token,\r\n          'wsfunction': 'core_enrol_get_users_courses',\r\n          'moodlewsrestformat': 'json',\r\n        },\r\n      );\r\n\r\n      print('--- Raw courses response ---');\r\n      print(coursesResponse.data);\r\n      List<dynamic> coursesList;\r\n\r\n      // Check the type of coursesResponse.data\r\n      if (coursesResponse.data is List) {\r\n        coursesList = coursesResponse.data as List;\r\n      } else if (coursesResponse.data is Map<String, dynamic>) {\r\n        // Log error message if it's an error map\r\n        print('Courses API returned a Map instead of a List:');\r\n        print(coursesResponse.data);\r\n        setState(() {\r\n          _isLoading = false;\r\n        });\r\n        return;\r\n      } else {\r\n        print('Unexpected courses API response type: ${coursesResponse.data.runtimeType}');\r\n        setState(() {\r\n          _isLoading = false;\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Log found course IDs\r\n      print('Found ${coursesList.length} courses.');\r\n      for (var course in coursesList) {\r\n        print('Course ID: ${course['id']}, fullname: ${course['fullname']}');\r\n      }\r\n\r\n      List<Map<String, dynamic>> coursesDetails = [];\r\n\r\n      // 2. For each course, fetch course contents.\r\n      for (var course in coursesList) {\r\n        final courseId = course['id'];\r\n        final contentsResponse = await _dio.get(\r\n          serverUrl,\r\n          queryParameters: {\r\n            'wstoken': widget.token,\r\n            'wsfunction': 'core_course_get_contents',\r\n            'moodlewsrestformat': 'json',\r\n            'courseid': courseId,\r\n          },\r\n        );\r\n\r\n        print('--- Raw contents response for course id $courseId ---');\r\n        print(contentsResponse.data);\r\n\r\n        // Check if contentsResponse.data is a List. If not, log it.\r\n        if (contentsResponse.data is List) {\r\n          coursesDetails.add({\r\n            'course': course,\r\n            'contents': contentsResponse.data,\r\n          });\r\n        } else if (contentsResponse.data is Map<String, dynamic>) {\r\n          // This might be an error response for the course.\r\n          print('Error or unexpected structure for course id $courseId:');\r\n          print(contentsResponse.data);\r\n          coursesDetails.add({\r\n            'course': course,\r\n            'contents': null,\r\n            'error': contentsResponse.data,\r\n          });\r\n        } else {\r\n          print('Unexpected contents type for course id $courseId: ${contentsResponse.data.runtimeType}');\r\n          coursesDetails.add({\r\n            'course': course,\r\n            'contents': null,\r\n          });\r\n        }\r\n      }\r\n\r\n      setState(() {\r\n        _coursesDetails = coursesDetails;\r\n        _isLoading = false;\r\n      });\r\n    } catch (e) {\r\n      print('Error fetching courses details: $e');\r\n      setState(() {\r\n        _isLoading = false;\r\n      });\r\n    }\r\n  }\r\n\r\n  // Build a widget to display one course and its details\r\n  Widget _buildCourseTile(Map<String, dynamic> courseDetail) {\r\n    final course = courseDetail['course'] as Map<String, dynamic>;\r\n    final contents = courseDetail['contents'];\r\n    final error = courseDetail['error'];\r\n\r\n    return Card(\r\n      margin: const EdgeInsets.symmetric(vertical: 8, horizontal: 16),\r\n      child: ExpansionTile(\r\n        title: Text(course['fullname'] ?? 'Unnamed Course'),\r\n        subtitle: Text('Course ID: ${course['id']}'),\r\n        children: [\r\n          if (error != null)\r\n            Padding(\r\n              padding: const EdgeInsets.all(8.0),\r\n              child: Text(\r\n                'Error: ${error['message'] ?? error}',\r\n                style: const TextStyle(color: Colors.red),\r\n              ),\r\n            )\r\n          else if (contents != null && contents is List && contents.isNotEmpty)\r\n            ...contents.map<Widget>((section) {\r\n              return Padding(\r\n                padding: const EdgeInsets.only(left: 16.0),\r\n                child: ExpansionTile(\r\n                  title: Text(section['name'] ?? 'Unnamed Section'),\r\n                  subtitle: Text('Section ID: ${section['id']}'),\r\n                  children: (section['modules'] as List<dynamic>).map<Widget>((module) {\r\n                    return ListTile(\r\n                      title: Text(module['name'] ?? 'Unnamed Module'),\r\n                      subtitle: Text(\r\n                        'Type: ${module['modname']}, Visible: ${module['visible']}',\r\n                      ),\r\n                    );\r\n                  }).toList(),\r\n                ),\r\n              );\r\n            }).toList()\r\n          else\r\n            const Padding(\r\n              padding: EdgeInsets.all(8.0),\r\n              child: Text('No contents available.'),\r\n            ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        title: const Text('Courses Details'),\r\n      ),\r\n      body: _isLoading\r\n          ? const Center(child: CircularProgressIndicator())\r\n          : _coursesDetails.isEmpty\r\n              ? const Center(child: Text('No courses found'))\r\n              : ListView.builder(\r\n                  itemCount: _coursesDetails.length,\r\n                  itemBuilder: (context, index) {\r\n                    return _buildCourseTile(_coursesDetails[index]);\r\n                  },\r\n                ),\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}