{
    "sourceFile": "lib/features/connection/screens/notifications_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1742921167428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1742921381240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import 'package:flutter/material.dart';\r\n import 'package:aybudle/core/services/api_service.dart';\r\n+import 'package:flutter_html/flutter_html.dart';\r\n \r\n class NotificationsScreen extends StatefulWidget {\r\n   final String baseUrl;\r\n   final String token;\r\n@@ -44,16 +45,17 @@\n \r\n   Widget _buildNotificationItem(Map<String, dynamic> notification) {\r\n     return ListTile(\r\n       title: Text(notification['subject'] ?? 'No Subject'),\r\n-      subtitle: Text(notification['smallmessage'] ?? 'No message'),\r\n+      subtitle: Html(data: notification['smallmessage'] ?? ''),\r\n       trailing: notification['timecreated'] != null\r\n           ? Text(DateTime.fromMillisecondsSinceEpoch(\r\n                   notification['timecreated'] * 1000)\r\n               .toString()\r\n               .split(' ')\r\n               .first)\r\n           : const Text(''),\r\n+      isThreeLine: true,\r\n     );\r\n   }\r\n \r\n   @override\r\n"
                },
                {
                    "date": 1742922012336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n import 'package:flutter/material.dart';\r\n import 'package:aybudle/core/services/api_service.dart';\r\n-import 'package:flutter_html/flutter_html.dart';\r\n \r\n class NotificationsScreen extends StatefulWidget {\r\n   final String baseUrl;\r\n   final String token;\r\n@@ -28,34 +27,62 @@\n   }\r\n \r\n   Future<void> _fetchNotifications() async {\r\n     try {\r\n+      print('=== Starting notifications fetch ===');\r\n+      print('Base URL: ${widget.baseUrl}');\r\n+      print('Token: ${widget.token}');\r\n+\r\n+      // Get user info\r\n+      print('\\n=== Fetching user info ===');\r\n       final userInfo = await _apiService.getUserInfo(widget.baseUrl, widget.token);\r\n+      print('Raw user info response:');\r\n+      print(userInfo);\r\n+      \r\n       final userId = userInfo['userid'] as int;\r\n+      print('Extracted user ID: $userId');\r\n+\r\n+      // Get notifications\r\n+      print('\\n=== Fetching notifications ===');\r\n       final notifications = await _apiService.getNotifications(widget.baseUrl, widget.token, userId);\r\n+      print('Raw notifications response:');\r\n+      print(notifications);\r\n \r\n       setState(() {\r\n         _notifications = notifications;\r\n         _isLoading = false;\r\n       });\r\n+\r\n+      print('\\n=== Final notifications data ===');\r\n+      print('Number of notifications: ${_notifications.length}');\r\n+      if (_notifications.isNotEmpty) {\r\n+        print('First notification:');\r\n+        print(_notifications.first);\r\n+      }\r\n     } catch (e) {\r\n-      print('Error fetching notifications: $e');\r\n+      print('\\n=== Error occurred ===');\r\n+      print('Error type: ${e.runtimeType}');\r\n+      print('Error message: $e');\r\n+      if (e is DioException) {\r\n+        print('Dio error details:');\r\n+        print('Response data: ${e.response?.data}');\r\n+        print('Status code: ${e.response?.statusCode}');\r\n+      }\r\n       setState(() => _isLoading = false);\r\n     }\r\n   }\r\n \r\n   Widget _buildNotificationItem(Map<String, dynamic> notification) {\r\n     return ListTile(\r\n       title: Text(notification['subject'] ?? 'No Subject'),\r\n-      subtitle: Html(data: notification['smallmessage'] ?? ''),\r\n+      subtitle: Text(notification['smallmessage'] ?? 'No message'),\r\n       trailing: notification['timecreated'] != null\r\n           ? Text(DateTime.fromMillisecondsSinceEpoch(\r\n                   notification['timecreated'] * 1000)\r\n               .toString()\r\n               .split(' ')\r\n               .first)\r\n           : const Text(''),\r\n-      isThreeLine: true,\r\n     );\r\n   }\r\n \r\n   @override\r\n"
                },
                {
                    "date": 1742922050003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+import 'package:dio/dio.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:aybudle/core/services/api_service.dart';\r\n \r\n class NotificationsScreen extends StatefulWidget {\r\n"
                },
                {
                    "date": 1742996254190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,79 @@\n+import 'package:dio/dio.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:aybudle/core/services/api_service.dart';\r\n+\r\n+class NotificationsScreen extends StatefulWidget {\r\n+  final String baseUrl;\r\n+  final String token;\r\n+\r\n+  const NotificationsScreen({\r\n+    Key? key,\r\n+    required this.baseUrl,\r\n+    required this.token,\r\n+  }) : super(key: key);\r\n+\r\n+  @override\r\n+  State<NotificationsScreen> createState() => _NotificationsScreenState();\r\n+}\r\n+\r\n+class _NotificationsScreenState extends State<NotificationsScreen> {\r\n+  bool _isLoading = true;\r\n+  List<dynamic> _notifications = [];\r\n+  final ApiService _apiService = ApiService();\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+    _fetchNotifications();\r\n+  }\r\n+\r\n+  Future<void> _fetchNotifications() async {\r\n+    try {\r\n+      final userInfo = await _apiService.getUserInfo(widget.baseUrl, widget.token);\r\n+      final userId = userInfo['userid'] as int;\r\n+      final notifications = await _apiService.getNotifications(widget.baseUrl, widget.token, userId);\r\n+  \r\n+      setState(() {\r\n+        _notifications = notifications;\r\n+        _isLoading = false;\r\n+      });\r\n+    } catch (e) {\r\n+      if (e is DioException) {\r\n+        print('Dio error details:');\r\n+        print('Response data: ${e.response?.data}');\r\n+        print('Status code: ${e.response?.statusCode}');\r\n+      }\r\n+      setState(() => _isLoading = false);\r\n+    }\r\n+  }\r\n+\r\n+  Widget _buildNotificationItem(Map<String, dynamic> notification) {\r\n+    return ListTile(\r\n+      title: Text(notification['subject'] ?? 'No Subject'),\r\n+      subtitle: Text(notification['smallmessage'] ?? 'No message'),\r\n+      trailing: notification['timecreated'] != null\r\n+          ? Text(DateTime.fromMillisecondsSinceEpoch(\r\n+                  notification['timecreated'] * 1000)\r\n+              .toString()\r\n+              .split(' ')\r\n+              .first)\r\n+          : const Text(''),\r\n+    );\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return Scaffold(\r\n+      appBar: AppBar(title: const Text('Notifications')),\r\n+      body: _isLoading\r\n+          ? const Center(child: CircularProgressIndicator())\r\n+          : _notifications.isEmpty\r\n+              ? const Center(child: Text('No notifications found.'))\r\n+              : ListView.builder(\r\n+                  itemCount: _notifications.length,\r\n+                  itemBuilder: (context, index) =>\r\n+                      _buildNotificationItem(_notifications[index]),\r\n+                ),\r\n+    );\r\n+  }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1742998312163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,87 +28,8 @@\n   }\r\n \r\n   Future<void> _fetchNotifications() async {\r\n     try {\r\n-      final userInfo = await _apiService.getUserInfo(widget.baseUrl, widget.token);\r\n-      final userId = userInfo['userid'] as int;\r\n-      final notifications = await _apiService.getNotifications(widget.baseUrl, widget.token, userId);\r\n-  \r\n-      setState(() {\r\n-        _notifications = notifications;\r\n-        _isLoading = false;\r\n-      });\r\n-    } catch (e) {\r\n-      if (e is DioException) {\r\n-        print('Dio error details:');\r\n-        print('Response data: ${e.response?.data}');\r\n-        print('Status code: ${e.response?.statusCode}');\r\n-      }\r\n-      setState(() => _isLoading = false);\r\n-    }\r\n-  }\r\n-\r\n-  Widget _buildNotificationItem(Map<String, dynamic> notification) {\r\n-    return ListTile(\r\n-      title: Text(notification['subject'] ?? 'No Subject'),\r\n-      subtitle: Text(notification['smallmessage'] ?? 'No message'),\r\n-      trailing: notification['timecreated'] != null\r\n-          ? Text(DateTime.fromMillisecondsSinceEpoch(\r\n-                  notification['timecreated'] * 1000)\r\n-              .toString()\r\n-              .split(' ')\r\n-              .first)\r\n-          : const Text(''),\r\n-    );\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return Scaffold(\r\n-      appBar: AppBar(title: const Text('Notifications')),\r\n-      body: _isLoading\r\n-          ? const Center(child: CircularProgressIndicator())\r\n-          : _notifications.isEmpty\r\n-              ? const Center(child: Text('No notifications found.'))\r\n-              : ListView.builder(\r\n-                  itemCount: _notifications.length,\r\n-                  itemBuilder: (context, index) =>\r\n-                      _buildNotificationItem(_notifications[index]),\r\n-                ),\r\n-    );\r\n-  }\r\n-}\n-import 'package:dio/dio.dart';\r\n-import 'package:flutter/material.dart';\r\n-import 'package:aybudle/core/services/api_service.dart';\r\n-\r\n-class NotificationsScreen extends StatefulWidget {\r\n-  final String baseUrl;\r\n-  final String token;\r\n-\r\n-  const NotificationsScreen({\r\n-    Key? key,\r\n-    required this.baseUrl,\r\n-    required this.token,\r\n-  }) : super(key: key);\r\n-\r\n-  @override\r\n-  State<NotificationsScreen> createState() => _NotificationsScreenState();\r\n-}\r\n-\r\n-class _NotificationsScreenState extends State<NotificationsScreen> {\r\n-  bool _isLoading = true;\r\n-  List<dynamic> _notifications = [];\r\n-  final ApiService _apiService = ApiService();\r\n-\r\n-  @override\r\n-  void initState() {\r\n-    super.initState();\r\n-    _fetchNotifications();\r\n-  }\r\n-\r\n-  Future<void> _fetchNotifications() async {\r\n-    try {\r\n       print('=== Starting notifications fetch ===');\r\n       print('Base URL: ${widget.baseUrl}');\r\n       print('Token: ${widget.token}');\r\n \r\n"
                }
            ],
            "date": 1742921167428,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\r\nimport 'package:aybudle/core/services/api_service.dart';\r\n\r\nclass NotificationsScreen extends StatefulWidget {\r\n  final String baseUrl;\r\n  final String token;\r\n\r\n  const NotificationsScreen({\r\n    Key? key,\r\n    required this.baseUrl,\r\n    required this.token,\r\n  }) : super(key: key);\r\n\r\n  @override\r\n  State<NotificationsScreen> createState() => _NotificationsScreenState();\r\n}\r\n\r\nclass _NotificationsScreenState extends State<NotificationsScreen> {\r\n  bool _isLoading = true;\r\n  List<dynamic> _notifications = [];\r\n  final ApiService _apiService = ApiService();\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _fetchNotifications();\r\n  }\r\n\r\n  Future<void> _fetchNotifications() async {\r\n    try {\r\n      final userInfo = await _apiService.getUserInfo(widget.baseUrl, widget.token);\r\n      final userId = userInfo['userid'] as int;\r\n      final notifications = await _apiService.getNotifications(widget.baseUrl, widget.token, userId);\r\n\r\n      setState(() {\r\n        _notifications = notifications;\r\n        _isLoading = false;\r\n      });\r\n    } catch (e) {\r\n      print('Error fetching notifications: $e');\r\n      setState(() => _isLoading = false);\r\n    }\r\n  }\r\n\r\n  Widget _buildNotificationItem(Map<String, dynamic> notification) {\r\n    return ListTile(\r\n      title: Text(notification['subject'] ?? 'No Subject'),\r\n      subtitle: Text(notification['smallmessage'] ?? 'No message'),\r\n      trailing: notification['timecreated'] != null\r\n          ? Text(DateTime.fromMillisecondsSinceEpoch(\r\n                  notification['timecreated'] * 1000)\r\n              .toString()\r\n              .split(' ')\r\n              .first)\r\n          : const Text(''),\r\n    );\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: AppBar(title: const Text('Notifications')),\r\n      body: _isLoading\r\n          ? const Center(child: CircularProgressIndicator())\r\n          : _notifications.isEmpty\r\n              ? const Center(child: Text('No notifications found.'))\r\n              : ListView.builder(\r\n                  itemCount: _notifications.length,\r\n                  itemBuilder: (context, index) =>\r\n                      _buildNotificationItem(_notifications[index]),\r\n                ),\r\n    );\r\n  }\r\n}"
        }
    ]
}