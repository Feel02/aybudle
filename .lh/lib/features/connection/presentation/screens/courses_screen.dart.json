{
    "sourceFile": "lib/features/connection/presentation/screens/courses_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1742159709105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1742160537818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,39 +25,58 @@\n     fetchCourses();\r\n   }\r\n \r\n   Future<void> fetchCourses() async {\r\n-    // Here we adapt your provided AJAX code to Flutter using Dio.\r\n-    // The domainname is the baseUrl provided by the user.\r\n     final domainname = widget.baseUrl; // e.g., http://<server URL>/moodle\r\n     const functionname = 'core_course_get_contents';\r\n     final serverurl = '$domainname/webservice/rest/server.php';\r\n \r\n-    // Parameters for the GET request.\r\n     final params = {\r\n       'wstoken': widget.token,\r\n       'wsfunction': functionname,\r\n       'moodlewsrestformat': 'json',\r\n-      'courseid': 2, // Adjust the course ID as needed.\r\n+      'courseid': 2, // Adjust course id as needed\r\n     };\r\n \r\n     try {\r\n       final response = await Dio().get(serverurl, queryParameters: params);\r\n       if (response.statusCode == 200) {\r\n-        setState(() {\r\n-          courses = response.data; // This depends on the API's returned structure.\r\n-          isLoading = false;\r\n-        });\r\n+        // Debug print the raw data so you can see what you got back\r\n+        print('Raw API response: ${response.data}');\r\n+        \r\n+        if (response.data is List) {\r\n+          setState(() {\r\n+            courses = response.data;\r\n+            isLoading = false;\r\n+          });\r\n+        } else if (response.data is Map<String, dynamic>) {\r\n+          // If it's a map, it might be an error message or a different structure.\r\n+          // Check for a key that might contain the list you need.\r\n+          if (response.data.containsKey('sections') &&\r\n+              response.data['sections'] is List) {\r\n+            setState(() {\r\n+              courses = response.data['sections'];\r\n+              isLoading = false;\r\n+            });\r\n+          } else {\r\n+            // Log the error or handle it appropriately\r\n+            print('Error or unexpected structure: ${response.data}');\r\n+            setState(() {\r\n+              isLoading = false;\r\n+            });\r\n+            // Optionally, show a message to the user here.\r\n+          }\r\n+        }\r\n       } else {\r\n         setState(() => isLoading = false);\r\n-        // Optionally handle non-200 statuses here.\r\n       }\r\n     } catch (e) {\r\n       print('Error fetching courses: $e');\r\n       setState(() => isLoading = false);\r\n     }\r\n   }\r\n \r\n+\r\n   @override\r\n   Widget build(BuildContext context) {\r\n     return Scaffold(\r\n       appBar: AppBar(\r\n"
                },
                {
                    "date": 1742161580787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,57 +26,89 @@\n   }\r\n \r\n   Future<void> fetchCourses() async {\r\n     final domainname = widget.baseUrl; // e.g., http://<server URL>/moodle\r\n-    const functionname = 'core_course_get_contents';\r\n+    final token = widget.token;\r\n     final serverurl = '$domainname/webservice/rest/server.php';\r\n \r\n-    final params = {\r\n-      'wstoken': widget.token,\r\n-      'wsfunction': functionname,\r\n-      'moodlewsrestformat': 'json',\r\n-      'courseid': 2, // Adjust course id as needed\r\n-    };\r\n+    try {\r\n+      // 1. Get the list of courses for the current user.\r\n+      final coursesResponse = await Dio().get(\r\n+        serverurl,\r\n+        queryParameters: {\r\n+          'wstoken': token,\r\n+          'wsfunction': 'core_enrol_get_users_courses',\r\n+          'moodlewsrestformat': 'json',\r\n+        },\r\n+      );\r\n \r\n-    try {\r\n-      final response = await Dio().get(serverurl, queryParameters: params);\r\n-      if (response.statusCode == 200) {\r\n-        // Debug print the raw data so you can see what you got back\r\n-        print('Raw API response: ${response.data}');\r\n-        \r\n-        if (response.data is List) {\r\n-          setState(() {\r\n-            courses = response.data;\r\n-            isLoading = false;\r\n+      if (coursesResponse.statusCode != 200) {\r\n+        throw Exception('Failed to load courses');\r\n+      }\r\n+\r\n+      // The response is expected to be a List of courses.\r\n+      final List<dynamic> coursesList = coursesResponse.data;\r\n+      print('Found ${coursesList.length} courses');\r\n+\r\n+      // Prepare a list to hold course details.\r\n+      List<Map<String, dynamic>> allCoursesDetails = [];\r\n+\r\n+      // 2. For each course, fetch its contents.\r\n+      for (var course in coursesList) {\r\n+        final courseId = course['id'];\r\n+        final contentsResponse = await Dio().get(\r\n+          serverurl,\r\n+          queryParameters: {\r\n+            'wstoken': token,\r\n+            'wsfunction': 'core_course_get_contents',\r\n+            'moodlewsrestformat': 'json',\r\n+            'courseid': courseId,\r\n+          },\r\n+        );\r\n+\r\n+        // Depending on the API response, you might need to check for errors.\r\n+        if (contentsResponse.statusCode == 200) {\r\n+          // Combine the course info with its contents.\r\n+          allCoursesDetails.add({\r\n+            'course': course,\r\n+            'contents': contentsResponse.data,\r\n           });\r\n-        } else if (response.data is Map<String, dynamic>) {\r\n-          // If it's a map, it might be an error message or a different structure.\r\n-          // Check for a key that might contain the list you need.\r\n-          if (response.data.containsKey('sections') &&\r\n-              response.data['sections'] is List) {\r\n-            setState(() {\r\n-              courses = response.data['sections'];\r\n-              isLoading = false;\r\n-            });\r\n-          } else {\r\n-            // Log the error or handle it appropriately\r\n-            print('Error or unexpected structure: ${response.data}');\r\n-            setState(() {\r\n-              isLoading = false;\r\n-            });\r\n-            // Optionally, show a message to the user here.\r\n+        } else {\r\n+          print('Failed to get contents for course id: $courseId');\r\n+        }\r\n+      }\r\n+\r\n+      // 3. Now, update your UI or print the details.\r\n+      // For example, print out each course and its module details:\r\n+      for (var courseDetails in allCoursesDetails) {\r\n+        final courseInfo = courseDetails['course'] as Map<String, dynamic>;\r\n+        final courseContents = courseDetails['contents'] as List<dynamic>;\r\n+        print('Course: ${courseInfo['fullname']} (ID: ${courseInfo['id']})');\r\n+        for (var section in courseContents) {\r\n+          print('  Section: ${section['name']} (ID: ${section['id']})');\r\n+          if (section['modules'] != null) {\r\n+            for (var module in section['modules']) {\r\n+              print('    Module: ${module['name']} '\r\n+                  'Type: ${module['modname']} '\r\n+                  'Visible: ${module['visible']}');\r\n+            }\r\n           }\r\n         }\r\n-      } else {\r\n-        setState(() => isLoading = false);\r\n       }\r\n+\r\n+      // Optionally, update your state to display these details in the UI.\r\n+      setState(() {\r\n+        _allCoursesDetails = allCoursesDetails;\r\n+        _isLoading = false;\r\n+      });\r\n     } catch (e) {\r\n-      print('Error fetching courses: $e');\r\n-      setState(() => isLoading = false);\r\n+      print('Error fetching course details: $e');\r\n+      setState(() => _isLoading = false);\r\n     }\r\n   }\r\n \r\n \r\n+\r\n   @override\r\n   Widget build(BuildContext context) {\r\n     return Scaffold(\r\n       appBar: AppBar(\r\n"
                },
                {
                    "date": 1742161691263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,14 +96,12 @@\n       }\r\n \r\n       // Optionally, update your state to display these details in the UI.\r\n       setState(() {\r\n-        _allCoursesDetails = allCoursesDetails;\r\n-        _isLoading = false;\r\n+        courses = allCoursesDetails;\r\n       });\r\n     } catch (e) {\r\n       print('Error fetching course details: $e');\r\n-      setState(() => _isLoading = false);\r\n     }\r\n   }\r\n \r\n \r\n"
                },
                {
                    "date": 1742161748899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,87 +26,57 @@\n   }\r\n \r\n   Future<void> fetchCourses() async {\r\n     final domainname = widget.baseUrl; // e.g., http://<server URL>/moodle\r\n-    final token = widget.token;\r\n+    const functionname = 'core_course_get_contents';\r\n     final serverurl = '$domainname/webservice/rest/server.php';\r\n \r\n+    final params = {\r\n+      'wstoken': widget.token,\r\n+      'wsfunction': functionname,\r\n+      'moodlewsrestformat': 'json',\r\n+      'courseid': 2,\r\n+    };\r\n+\r\n     try {\r\n-      // 1. Get the list of courses for the current user.\r\n-      final coursesResponse = await Dio().get(\r\n-        serverurl,\r\n-        queryParameters: {\r\n-          'wstoken': token,\r\n-          'wsfunction': 'core_enrol_get_users_courses',\r\n-          'moodlewsrestformat': 'json',\r\n-        },\r\n-      );\r\n-\r\n-      if (coursesResponse.statusCode != 200) {\r\n-        throw Exception('Failed to load courses');\r\n-      }\r\n-\r\n-      // The response is expected to be a List of courses.\r\n-      final List<dynamic> coursesList = coursesResponse.data;\r\n-      print('Found ${coursesList.length} courses');\r\n-\r\n-      // Prepare a list to hold course details.\r\n-      List<Map<String, dynamic>> allCoursesDetails = [];\r\n-\r\n-      // 2. For each course, fetch its contents.\r\n-      for (var course in coursesList) {\r\n-        final courseId = course['id'];\r\n-        final contentsResponse = await Dio().get(\r\n-          serverurl,\r\n-          queryParameters: {\r\n-            'wstoken': token,\r\n-            'wsfunction': 'core_course_get_contents',\r\n-            'moodlewsrestformat': 'json',\r\n-            'courseid': courseId,\r\n-          },\r\n-        );\r\n-\r\n-        // Depending on the API response, you might need to check for errors.\r\n-        if (contentsResponse.statusCode == 200) {\r\n-          // Combine the course info with its contents.\r\n-          allCoursesDetails.add({\r\n-            'course': course,\r\n-            'contents': contentsResponse.data,\r\n+      final response = await Dio().get(serverurl, queryParameters: params);\r\n+      if (response.statusCode == 200) {\r\n+        // Debug print the raw data so you can see what you got back\r\n+        print('Raw API response: ${response.data}');\r\n+        \r\n+        if (response.data is List) {\r\n+          setState(() {\r\n+            courses = response.data;\r\n+            isLoading = false;\r\n           });\r\n-        } else {\r\n-          print('Failed to get contents for course id: $courseId');\r\n-        }\r\n-      }\r\n-\r\n-      // 3. Now, update your UI or print the details.\r\n-      // For example, print out each course and its module details:\r\n-      for (var courseDetails in allCoursesDetails) {\r\n-        final courseInfo = courseDetails['course'] as Map<String, dynamic>;\r\n-        final courseContents = courseDetails['contents'] as List<dynamic>;\r\n-        print('Course: ${courseInfo['fullname']} (ID: ${courseInfo['id']})');\r\n-        for (var section in courseContents) {\r\n-          print('  Section: ${section['name']} (ID: ${section['id']})');\r\n-          if (section['modules'] != null) {\r\n-            for (var module in section['modules']) {\r\n-              print('    Module: ${module['name']} '\r\n-                  'Type: ${module['modname']} '\r\n-                  'Visible: ${module['visible']}');\r\n-            }\r\n+        } else if (response.data is Map<String, dynamic>) {\r\n+          // If it's a map, it might be an error message or a different structure.\r\n+          // Check for a key that might contain the list you need.\r\n+          if (response.data.containsKey('sections') &&\r\n+              response.data['sections'] is List) {\r\n+            setState(() {\r\n+              courses = response.data['sections'];\r\n+              isLoading = false;\r\n+            });\r\n+          } else {\r\n+            // Log the error or handle it appropriately\r\n+            print('Error or unexpected structure: ${response.data}');\r\n+            setState(() {\r\n+              isLoading = false;\r\n+            });\r\n+            // Optionally, show a message to the user here.\r\n           }\r\n         }\r\n+      } else {\r\n+        setState(() => isLoading = false);\r\n       }\r\n-\r\n-      // Optionally, update your state to display these details in the UI.\r\n-      setState(() {\r\n-        courses = allCoursesDetails;\r\n-      });\r\n     } catch (e) {\r\n-      print('Error fetching course details: $e');\r\n+      print('Error fetching courses: $e');\r\n+      setState(() => isLoading = false);\r\n     }\r\n   }\r\n \r\n \r\n-\r\n   @override\r\n   Widget build(BuildContext context) {\r\n     return Scaffold(\r\n       appBar: AppBar(\r\n"
                },
                {
                    "date": 1742161913892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import 'package:dio/dio.dart';\r\n \r\n class CoursesScreen extends StatefulWidget {\r\n   final String baseUrl;\r\n-  final String token; // Moodle token\r\n+  final String token;\r\n \r\n   const CoursesScreen({\r\n     Key? key,\r\n     required this.baseUrl,\r\n@@ -15,85 +15,119 @@\n   State<CoursesScreen> createState() => _CoursesScreenState();\r\n }\r\n \r\n class _CoursesScreenState extends State<CoursesScreen> {\r\n-  List<dynamic> courses = [];\r\n-  bool isLoading = true;\r\n+  bool _isLoading = true;\r\n+  // Each element is a map with two keys: 'course' and 'contents'\r\n+  List<Map<String, dynamic>> _coursesDetails = [];\r\n \r\n+  final Dio _dio = Dio();\r\n+\r\n   @override\r\n   void initState() {\r\n     super.initState();\r\n-    fetchCourses();\r\n+    fetchCoursesDetails();\r\n   }\r\n \r\n-  Future<void> fetchCourses() async {\r\n-    final domainname = widget.baseUrl; // e.g., http://<server URL>/moodle\r\n-    const functionname = 'core_course_get_contents';\r\n-    final serverurl = '$domainname/webservice/rest/server.php';\r\n+  /// Fetch all courses the user is enrolled in and for each course, fetch its contents.\r\n+  Future<void> fetchCoursesDetails() async {\r\n+    final String serverUrl = '${widget.baseUrl}/webservice/rest/server.php';\r\n+    try {\r\n+      // 1. Get courses for the user.\r\n+      final coursesResponse = await _dio.get(\r\n+        serverUrl,\r\n+        queryParameters: {\r\n+          'wstoken': widget.token,\r\n+          'wsfunction': 'core_enrol_get_users_courses',\r\n+          'moodlewsrestformat': 'json',\r\n+        },\r\n+      );\r\n \r\n-    final params = {\r\n-      'wstoken': widget.token,\r\n-      'wsfunction': functionname,\r\n-      'moodlewsrestformat': 'json',\r\n-      'courseid': 2,\r\n-    };\r\n+      if (coursesResponse.statusCode != 200) {\r\n+        throw Exception('Failed to load courses');\r\n+      }\r\n \r\n-    try {\r\n-      final response = await Dio().get(serverurl, queryParameters: params);\r\n-      if (response.statusCode == 200) {\r\n-        // Debug print the raw data so you can see what you got back\r\n-        print('Raw API response: ${response.data}');\r\n-        \r\n-        if (response.data is List) {\r\n-          setState(() {\r\n-            courses = response.data;\r\n-            isLoading = false;\r\n+      // Expect a List of courses.\r\n+      final List<dynamic> coursesList = coursesResponse.data;\r\n+      List<Map<String, dynamic>> coursesDetails = [];\r\n+\r\n+      // 2. For each course, fetch its contents.\r\n+      for (var course in coursesList) {\r\n+        final courseId = course['id'];\r\n+        final contentsResponse = await _dio.get(\r\n+          serverUrl,\r\n+          queryParameters: {\r\n+            'wstoken': widget.token,\r\n+            'wsfunction': 'core_course_get_contents',\r\n+            'moodlewsrestformat': 'json',\r\n+            'courseid': courseId,\r\n+          },\r\n+        );\r\n+\r\n+        // The expected response is a List (one element per section).\r\n+        if (contentsResponse.statusCode == 200) {\r\n+          coursesDetails.add({\r\n+            'course': course,\r\n+            'contents': contentsResponse.data,\r\n           });\r\n-        } else if (response.data is Map<String, dynamic>) {\r\n-          // If it's a map, it might be an error message or a different structure.\r\n-          // Check for a key that might contain the list you need.\r\n-          if (response.data.containsKey('sections') &&\r\n-              response.data['sections'] is List) {\r\n\\ No newline at end of file\n-            setState(() {\r\n-              courses = response.data['sections'];\r\n-              isLoading = false;\r\n-            });\r\n-          } else {\r\n-            // Log the error or handle it appropriately\r\n-            print('Error or unexpected structure: ${response.data}');\r\n-            setState(() {\r\n-              isLoading = false;\r\n-            });\r\n-            // Optionally, show a message to the user here.\r\n-          }\r\n+        } else {\r\n+          // Log the issue but continue with the other courses.\r\n+          print('Failed to fetch contents for course id: $courseId');\r\n         }\r\n-      } else {\r\n-        setState(() => isLoading = false);\r\n       }\r\n+\r\n+      setState(() {\r\n+        _coursesDetails = coursesDetails;\r\n+        _isLoading = false;\r\n+      });\r\n     } catch (e) {\r\n-      print('Error fetching courses: $e');\r\n-      setState(() => isLoading = false);\r\n+      print('Error fetching courses details: $e');\r\n+      setState(() {\r\n+        _isLoading = false;\r\n+      });\r\n     }\r\n   }\r\n \r\n+  /// Build an ExpansionTile for a single course.\r\n+  Widget _buildCourseTile(Map<String, dynamic> courseDetails) {\r\n+    final courseInfo = courseDetails['course'] as Map<String, dynamic>;\r\n+    final contents = courseDetails['contents'] as List<dynamic>;\r\n \r\n+    return ExpansionTile(\r\n+      title: Text(courseInfo['fullname'] ?? 'No Title'),\r\n+      subtitle: Text('Course ID: ${courseInfo['id']}'),\r\n+      children: contents.map<Widget>((section) {\r\n+        // Each section is a map that should contain a 'name' and a list of 'modules'.\r\n+        return ExpansionTile(\r\n+          title: Text(section['name'] ?? 'Unnamed Section'),\r\n+          subtitle: Text('Section ID: ${section['id']}'),\r\n+          children: (section['modules'] as List<dynamic>).map<Widget>((module) {\r\n+            return ListTile(\r\n+              title: Text(module['name'] ?? 'Unnamed Module'),\r\n+              subtitle: Text(\r\n+                  'Type: ${module['modname']}, Visible: ${module['visible']}'),\r\n+            );\r\n+          }).toList(),\r\n+        );\r\n+      }).toList(),\r\n+    );\r\n+  }\r\n+\r\n   @override\r\n   Widget build(BuildContext context) {\r\n     return Scaffold(\r\n       appBar: AppBar(\r\n-        title: const Text('Courses'),\r\n+        title: const Text('Courses Details'),\r\n       ),\r\n-      body: isLoading\r\n+      body: _isLoading\r\n           ? const Center(child: CircularProgressIndicator())\r\n-          : ListView.builder(\r\n-              itemCount: courses.length,\r\n-              itemBuilder: (context, index) {\r\n-                var course = courses[index];\r\n-                return ListTile(\r\n-                  title: Text(course['fullname'] ?? 'Course Name'),\r\n-                  subtitle: Text(course['shortname'] ?? ''),\r\n-                );\r\n-              },\r\n-            ),\r\n+          : _coursesDetails.isEmpty\r\n+              ? const Center(child: Text('No courses found'))\r\n+              : ListView.builder(\r\n+                  itemCount: _coursesDetails.length,\r\n+                  itemBuilder: (context, index) {\r\n+                    return _buildCourseTile(_coursesDetails[index]);\r\n+                  },\r\n+                ),\r\n     );\r\n   }\r\n-}\n+}\r\n"
                },
                {
                    "date": 1742162440384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,24 +16,24 @@\n }\r\n \r\n class _CoursesScreenState extends State<CoursesScreen> {\r\n   bool _isLoading = true;\r\n-  // Each element is a map with two keys: 'course' and 'contents'\r\n+  // This will store a list of maps. Each map contains:\r\n+  // 'course': the course info (Map) and 'contents': the course contents (raw response)\r\n   List<Map<String, dynamic>> _coursesDetails = [];\r\n \r\n   final Dio _dio = Dio();\r\n \r\n   @override\r\n   void initState() {\r\n     super.initState();\r\n-    fetchCoursesDetails();\r\n+    fetchAllCoursesAndDetails();\r\n   }\r\n \r\n-  /// Fetch all courses the user is enrolled in and for each course, fetch its contents.\r\n-  Future<void> fetchCoursesDetails() async {\r\n+  Future<void> fetchAllCoursesAndDetails() async {\r\n     final String serverUrl = '${widget.baseUrl}/webservice/rest/server.php';\r\n     try {\r\n-      // 1. Get courses for the user.\r\n+      // 1. Fetch enrolled courses\r\n       final coursesResponse = await _dio.get(\r\n         serverUrl,\r\n         queryParameters: {\r\n           'wstoken': widget.token,\r\n@@ -41,17 +41,40 @@\n           'moodlewsrestformat': 'json',\r\n         },\r\n       );\r\n \r\n-      if (coursesResponse.statusCode != 200) {\r\n-        throw Exception('Failed to load courses');\r\n+      print('--- Raw courses response ---');\r\n+      print(coursesResponse.data);\r\n+      List<dynamic> coursesList;\r\n+\r\n+      // Check the type of coursesResponse.data\r\n+      if (coursesResponse.data is List) {\r\n+        coursesList = coursesResponse.data as List;\r\n+      } else if (coursesResponse.data is Map<String, dynamic>) {\r\n+        // Log error message if it's an error map\r\n+        print('Courses API returned a Map instead of a List:');\r\n+        print(coursesResponse.data);\r\n+        setState(() {\r\n+          _isLoading = false;\r\n+        });\r\n+        return;\r\n+      } else {\r\n+        print('Unexpected courses API response type: ${coursesResponse.data.runtimeType}');\r\n+        setState(() {\r\n+          _isLoading = false;\r\n+        });\r\n+        return;\r\n       }\r\n \r\n-      // Expect a List of courses.\r\n-      final List<dynamic> coursesList = coursesResponse.data;\r\n+      // Log found course IDs\r\n+      print('Found ${coursesList.length} courses.');\r\n+      for (var course in coursesList) {\r\n+        print('Course ID: ${course['id']}, fullname: ${course['fullname']}');\r\n+      }\r\n+\r\n       List<Map<String, dynamic>> coursesDetails = [];\r\n \r\n-      // 2. For each course, fetch its contents.\r\n+      // 2. For each course, fetch course contents.\r\n       for (var course in coursesList) {\r\n         final courseId = course['id'];\r\n         final contentsResponse = await _dio.get(\r\n           serverUrl,\r\n@@ -62,17 +85,32 @@\n             'courseid': courseId,\r\n           },\r\n         );\r\n \r\n-        // The expected response is a List (one element per section).\r\n-        if (contentsResponse.statusCode == 200) {\r\n+        print('--- Raw contents response for course id $courseId ---');\r\n+        print(contentsResponse.data);\r\n+\r\n+        // Check if contentsResponse.data is a List. If not, log it.\r\n+        if (contentsResponse.data is List) {\r\n           coursesDetails.add({\r\n             'course': course,\r\n             'contents': contentsResponse.data,\r\n           });\r\n+        } else if (contentsResponse.data is Map<String, dynamic>) {\r\n+          // This might be an error response for the course.\r\n+          print('Error or unexpected structure for course id $courseId:');\r\n+          print(contentsResponse.data);\r\n+          coursesDetails.add({\r\n+            'course': course,\r\n+            'contents': null,\r\n+            'error': contentsResponse.data,\r\n+          });\r\n         } else {\r\n-          // Log the issue but continue with the other courses.\r\n-          print('Failed to fetch contents for course id: $courseId');\r\n+          print('Unexpected contents type for course id $courseId: ${contentsResponse.data.runtimeType}');\r\n+          coursesDetails.add({\r\n+            'course': course,\r\n+            'contents': null,\r\n+          });\r\n         }\r\n       }\r\n \r\n       setState(() {\r\n@@ -86,30 +124,53 @@\n       });\r\n     }\r\n   }\r\n \r\n-  /// Build an ExpansionTile for a single course.\r\n-  Widget _buildCourseTile(Map<String, dynamic> courseDetails) {\r\n-    final courseInfo = courseDetails['course'] as Map<String, dynamic>;\r\n-    final contents = courseDetails['contents'] as List<dynamic>;\r\n+  // Build a widget to display one course and its details\r\n+  Widget _buildCourseTile(Map<String, dynamic> courseDetail) {\r\n+    final course = courseDetail['course'] as Map<String, dynamic>;\r\n+    final contents = courseDetail['contents'];\r\n+    final error = courseDetail['error'];\r\n \r\n-    return ExpansionTile(\r\n-      title: Text(courseInfo['fullname'] ?? 'No Title'),\r\n-      subtitle: Text('Course ID: ${courseInfo['id']}'),\r\n-      children: contents.map<Widget>((section) {\r\n-        // Each section is a map that should contain a 'name' and a list of 'modules'.\r\n-        return ExpansionTile(\r\n-          title: Text(section['name'] ?? 'Unnamed Section'),\r\n-          subtitle: Text('Section ID: ${section['id']}'),\r\n-          children: (section['modules'] as List<dynamic>).map<Widget>((module) {\r\n-            return ListTile(\r\n-              title: Text(module['name'] ?? 'Unnamed Module'),\r\n-              subtitle: Text(\r\n-                  'Type: ${module['modname']}, Visible: ${module['visible']}'),\r\n-            );\r\n-          }).toList(),\r\n-        );\r\n-      }).toList(),\r\n+    return Card(\r\n+      margin: const EdgeInsets.symmetric(vertical: 8, horizontal: 16),\r\n+      child: ExpansionTile(\r\n+        title: Text(course['fullname'] ?? 'Unnamed Course'),\r\n+        subtitle: Text('Course ID: ${course['id']}'),\r\n+        children: [\r\n+          if (error != null)\r\n+            Padding(\r\n+              padding: const EdgeInsets.all(8.0),\r\n+              child: Text(\r\n+                'Error: ${error['message'] ?? error}',\r\n+                style: const TextStyle(color: Colors.red),\r\n+              ),\r\n+            )\r\n+          else if (contents != null && contents is List && contents.isNotEmpty)\r\n+            ...contents.map<Widget>((section) {\r\n+              return Padding(\r\n+                padding: const EdgeInsets.only(left: 16.0),\r\n+                child: ExpansionTile(\r\n+                  title: Text(section['name'] ?? 'Unnamed Section'),\r\n+                  subtitle: Text('Section ID: ${section['id']}'),\r\n+                  children: (section['modules'] as List<dynamic>).map<Widget>((module) {\r\n+                    return ListTile(\r\n+                      title: Text(module['name'] ?? 'Unnamed Module'),\r\n+                      subtitle: Text(\r\n+                        'Type: ${module['modname']}, Visible: ${module['visible']}',\r\n+                      ),\r\n+                    );\r\n+                  }).toList(),\r\n+                ),\r\n+              );\r\n+            }).toList()\r\n+          else\r\n+            const Padding(\r\n+              padding: EdgeInsets.all(8.0),\r\n+              child: Text('No contents available.'),\r\n+            ),\r\n+        ],\r\n+      ),\r\n     );\r\n   }\r\n \r\n   @override\r\n"
                },
                {
                    "date": 1742162958612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,194 @@\n+import 'package:flutter/material.dart';\r\n+import 'package:dio/dio.dart';\r\n+\r\n+class CoursesScreen extends StatefulWidget {\r\n+  final String baseUrl;\r\n+  final String token;\r\n+\r\n+  const CoursesScreen({\r\n+    Key? key,\r\n+    required this.baseUrl,\r\n+    required this.token,\r\n+  }) : super(key: key);\r\n+\r\n+  @override\r\n+  State<CoursesScreen> createState() => _CoursesScreenState();\r\n+}\r\n+\r\n+class _CoursesScreenState extends State<CoursesScreen> {\r\n+  bool _isLoading = true;\r\n+  // This will store a list of maps. Each map contains:\r\n+  // 'course': the course info (Map) and 'contents': the course contents (raw response)\r\n+  List<Map<String, dynamic>> _coursesDetails = [];\r\n+\r\n+  final Dio _dio = Dio();\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+    fetchAllCoursesAndDetails();\r\n+  }\r\n+\r\n+  Future<void> fetchAllCoursesAndDetails() async {\r\n+    final String serverUrl = '${widget.baseUrl}/moodle/webservice/rest/server.php';\r\n+    try {\r\n+      // 1. Fetch enrolled courses\r\n+      final coursesResponse = await _dio.get(\r\n+        serverUrl,\r\n+        queryParameters: {\r\n+          'wstoken': widget.token,\r\n+          'wsfunction': 'core_enrol_get_users_courses',\r\n+          'moodlewsrestformat': 'json',\r\n+        },\r\n+      );\r\n+\r\n+      print('--- Raw courses response ---');\r\n+      print(coursesResponse.data);\r\n+      List<dynamic> coursesList;\r\n+\r\n+      // Check the type of coursesResponse.data\r\n+      if (coursesResponse.data is List) {\r\n+        coursesList = coursesResponse.data as List;\r\n+      } else if (coursesResponse.data is Map<String, dynamic>) {\r\n+        // Log error message if it's an error map\r\n+        print('Courses API returned a Map instead of a List:');\r\n+        print(coursesResponse.data);\r\n+        setState(() {\r\n+          _isLoading = false;\r\n+        });\r\n+        return;\r\n+      } else {\r\n+        print('Unexpected courses API response type: ${coursesResponse.data.runtimeType}');\r\n+        setState(() {\r\n+          _isLoading = false;\r\n+        });\r\n+        return;\r\n+      }\r\n+\r\n+      // Log found course IDs\r\n+      print('Found ${coursesList.length} courses.');\r\n+      for (var course in coursesList) {\r\n+        print('Course ID: ${course['id']}, fullname: ${course['fullname']}');\r\n+      }\r\n+\r\n+      List<Map<String, dynamic>> coursesDetails = [];\r\n+\r\n+      // 2. For each course, fetch course contents.\r\n+      for (var course in coursesList) {\r\n+        final courseId = course['id'];\r\n+        final contentsResponse = await _dio.get(\r\n+          serverUrl,\r\n+          queryParameters: {\r\n+            'wstoken': widget.token,\r\n+            'wsfunction': 'core_course_get_contents',\r\n+            'moodlewsrestformat': 'json',\r\n+            'courseid': courseId,\r\n+          },\r\n+        );\r\n+\r\n+        print('--- Raw contents response for course id $courseId ---');\r\n+        print(contentsResponse.data);\r\n+\r\n+        // Check if contentsResponse.data is a List. If not, log it.\r\n+        if (contentsResponse.data is List) {\r\n+          coursesDetails.add({\r\n+            'course': course,\r\n+            'contents': contentsResponse.data,\r\n+          });\r\n+        } else if (contentsResponse.data is Map<String, dynamic>) {\r\n+          // This might be an error response for the course.\r\n+          print('Error or unexpected structure for course id $courseId:');\r\n+          print(contentsResponse.data);\r\n+          coursesDetails.add({\r\n+            'course': course,\r\n+            'contents': null,\r\n+            'error': contentsResponse.data,\r\n+          });\r\n+        } else {\r\n+          print('Unexpected contents type for course id $courseId: ${contentsResponse.data.runtimeType}');\r\n+          coursesDetails.add({\r\n+            'course': course,\r\n+            'contents': null,\r\n+          });\r\n+        }\r\n+      }\r\n+\r\n+      setState(() {\r\n+        _coursesDetails = coursesDetails;\r\n+        _isLoading = false;\r\n+      });\r\n+    } catch (e) {\r\n+      print('Error fetching courses details: $e');\r\n+      setState(() {\r\n+        _isLoading = false;\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  // Build a widget to display one course and its details\r\n+  Widget _buildCourseTile(Map<String, dynamic> courseDetail) {\r\n+    final course = courseDetail['course'] as Map<String, dynamic>;\r\n+    final contents = courseDetail['contents'];\r\n+    final error = courseDetail['error'];\r\n+\r\n+    return Card(\r\n+      margin: const EdgeInsets.symmetric(vertical: 8, horizontal: 16),\r\n+      child: ExpansionTile(\r\n+        title: Text(course['fullname'] ?? 'Unnamed Course'),\r\n+        subtitle: Text('Course ID: ${course['id']}'),\r\n+        children: [\r\n+          if (error != null)\r\n+            Padding(\r\n+              padding: const EdgeInsets.all(8.0),\r\n+              child: Text(\r\n+                'Error: ${error['message'] ?? error}',\r\n+                style: const TextStyle(color: Colors.red),\r\n+              ),\r\n+            )\r\n+          else if (contents != null && contents is List && contents.isNotEmpty)\r\n+            ...contents.map<Widget>((section) {\r\n+              return Padding(\r\n+                padding: const EdgeInsets.only(left: 16.0),\r\n+                child: ExpansionTile(\r\n+                  title: Text(section['name'] ?? 'Unnamed Section'),\r\n+                  subtitle: Text('Section ID: ${section['id']}'),\r\n+                  children: (section['modules'] as List<dynamic>).map<Widget>((module) {\r\n+                    return ListTile(\r\n+                      title: Text(module['name'] ?? 'Unnamed Module'),\r\n+                      subtitle: Text(\r\n+                        'Type: ${module['modname']}, Visible: ${module['visible']}',\r\n+                      ),\r\n+                    );\r\n+                  }).toList(),\r\n+                ),\r\n+              );\r\n+            }).toList()\r\n+          else\r\n+            const Padding(\r\n+              padding: EdgeInsets.all(8.0),\r\n+              child: Text('No contents available.'),\r\n+            ),\r\n+        ],\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return Scaffold(\r\n+      appBar: AppBar(\r\n+        title: const Text('Courses Details'),\r\n+      ),\r\n+      body: _isLoading\r\n+          ? const Center(child: CircularProgressIndicator())\r\n+          : _coursesDetails.isEmpty\r\n+              ? const Center(child: Text('No courses found'))\r\n+              : ListView.builder(\r\n+                  itemCount: _coursesDetails.length,\r\n+                  itemBuilder: (context, index) {\r\n+                    return _buildCourseTile(_coursesDetails[index]);\r\n+                  },\r\n+                ),\r\n+    );\r\n+  }\r\n+}\r\n"
                }
            ],
            "date": 1742159709105,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\r\nimport 'package:dio/dio.dart';\r\n\r\nclass CoursesScreen extends StatefulWidget {\r\n  final String baseUrl;\r\n  final String token; // Moodle token\r\n\r\n  const CoursesScreen({\r\n    Key? key,\r\n    required this.baseUrl,\r\n    required this.token,\r\n  }) : super(key: key);\r\n\r\n  @override\r\n  State<CoursesScreen> createState() => _CoursesScreenState();\r\n}\r\n\r\nclass _CoursesScreenState extends State<CoursesScreen> {\r\n  List<dynamic> courses = [];\r\n  bool isLoading = true;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    fetchCourses();\r\n  }\r\n\r\n  Future<void> fetchCourses() async {\r\n    // Here we adapt your provided AJAX code to Flutter using Dio.\r\n    // The domainname is the baseUrl provided by the user.\r\n    final domainname = widget.baseUrl; // e.g., http://<server URL>/moodle\r\n    const functionname = 'core_course_get_contents';\r\n    final serverurl = '$domainname/webservice/rest/server.php';\r\n\r\n    // Parameters for the GET request.\r\n    final params = {\r\n      'wstoken': widget.token,\r\n      'wsfunction': functionname,\r\n      'moodlewsrestformat': 'json',\r\n      'courseid': 2, // Adjust the course ID as needed.\r\n    };\r\n\r\n    try {\r\n      final response = await Dio().get(serverurl, queryParameters: params);\r\n      if (response.statusCode == 200) {\r\n        setState(() {\r\n          courses = response.data; // This depends on the API's returned structure.\r\n          isLoading = false;\r\n        });\r\n      } else {\r\n        setState(() => isLoading = false);\r\n        // Optionally handle non-200 statuses here.\r\n      }\r\n    } catch (e) {\r\n      print('Error fetching courses: $e');\r\n      setState(() => isLoading = false);\r\n    }\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        title: const Text('Courses'),\r\n      ),\r\n      body: isLoading\r\n          ? const Center(child: CircularProgressIndicator())\r\n          : ListView.builder(\r\n              itemCount: courses.length,\r\n              itemBuilder: (context, index) {\r\n                var course = courses[index];\r\n                return ListTile(\r\n                  title: Text(course['fullname'] ?? 'Course Name'),\r\n                  subtitle: Text(course['shortname'] ?? ''),\r\n                );\r\n              },\r\n            ),\r\n    );\r\n  }\r\n}"
        }
    ]
}