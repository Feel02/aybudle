{
    "sourceFile": "lib/features/connection/presentation/screens/login_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1742130466297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1742131774648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,18 @@\n                                 password: _passwordController.text,\r\n                               );\r\n                               \r\n                               if (viewModel.errorMessage.isEmpty) {\r\n-                                // Navigate to courses screen\r\n+                                Navigator.pushReplacement(\r\n+                                  context,\r\n+                                  MaterialPageRoute(\r\n+                                    builder: (_) => WebViewScreen(\r\n+                                      baseUrl: widget.baseUrl,\r\n+                                      username: _usernameController.text,\r\n+                                      password: _passwordController.text,\r\n+                                    ),\r\n+                                  ),\r\n+                                );\r\n                               }\r\n                             }\r\n                           },\r\n                     child: const Text('Login'),\r\n"
                },
                {
                    "date": 1742131929967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+import 'package:aybudle/features/connection/presentation/screens/webview_screen.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:provider/provider.dart';\r\n import '../view_models/login_view_model.dart';\r\n \r\n"
                },
                {
                    "date": 1742137118653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,97 +1,71 @@\n-import 'package:aybudle/features/connection/presentation/screens/webview_screen.dart';\r\n+import 'package:aybudle/core/constants/app_constants.dart';\r\n+import 'package:aybudle/features/connection/presentation/view_models/login_view_model.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:provider/provider.dart';\r\n-import '../view_models/login_view_model.dart';\r\n \r\n-class LoginScreen extends StatefulWidget {\r\n+class LoginScreen extends StatelessWidget {\r\n   final String baseUrl;\r\n+  const LoginScreen({Key? key, required this.baseUrl}) : super(key: key);\r\n \r\n-  const LoginScreen({super.key, required this.baseUrl});\r\n-\r\n   @override\r\n-  _LoginScreenState createState() => _LoginScreenState();\r\n-}\r\n-\r\n-class _LoginScreenState extends State<LoginScreen> {\r\n-  final _formKey = GlobalKey<FormState>();\r\n-  final _usernameController = TextEditingController();\r\n-  final _passwordController = TextEditingController();\r\n-\r\n-  @override\r\n   Widget build(BuildContext context) {\r\n-    return Scaffold(\r\n-      appBar: AppBar(title: const Text('Moodle Login')),\r\n-      body: Padding(\r\n-        padding: const EdgeInsets.all(16.0),\r\n-        child: Consumer<LoginViewModel>(\r\n-          builder: (context, viewModel, _) {\r\n-            return Form(\r\n-              key: _formKey,\r\n+    return ChangeNotifierProvider<LoginViewModel>(\r\n+      create: (_) => LoginViewModel(baseUrl),\r\n+      child: Scaffold(\r\n+        appBar: AppBar(\r\n+          title: const Text(\"Login\"),\r\n+        ),\r\n+        body: Consumer<LoginViewModel>(\r\n+          builder: (context, viewModel, child) {\r\n+            return Padding(\r\n+              padding: const EdgeInsets.all(16.0),\r\n               child: Column(\r\n                 children: [\r\n-                  TextFormField(\r\n-                    controller: _usernameController,\r\n+                  TextField(\r\n                     decoration: const InputDecoration(\r\n-                      labelText: 'Username',\r\n+                      labelText: \"Username\",\r\n                       border: OutlineInputBorder(),\r\n                     ),\r\n-                    validator: (value) => value?.isEmpty ?? true ? 'Required' : null,\r\n+                    onChanged: viewModel.setUsername,\r\n                   ),\r\n                   const SizedBox(height: 20),\r\n-                  TextFormField(\r\n-                    controller: _passwordController,\r\n-                    obscureText: true,\r\n+                  TextField(\r\n                     decoration: const InputDecoration(\r\n-                      labelText: 'Password',\r\n+                      labelText: \"Password\",\r\n                       border: OutlineInputBorder(),\r\n                     ),\r\n-                    validator: (value) => value?.isEmpty ?? true ? 'Required' : null,\r\n+                    obscureText: true,\r\n+                    onChanged: viewModel.setPassword,\r\n                   ),\r\n                   const SizedBox(height: 20),\r\n-                  if (viewModel.errorMessage.isNotEmpty)\r\n-                    Text(\r\n-                      viewModel.errorMessage,\r\n-                      style: const TextStyle(color: Colors.red),\r\n-                    ),\r\n-                  const SizedBox(height: 20),\r\n                   ElevatedButton(\r\n                     onPressed: viewModel.isLoading\r\n                         ? null\r\n                         : () async {\r\n-                            if (_formKey.currentState?.validate() ?? false) {\r\n-                              await viewModel.login(\r\n-                                baseUrl: widget.baseUrl,\r\n-                                username: _usernameController.text,\r\n-                                password: _passwordController.text,\r\n+                            bool success = await viewModel.login();\r\n+                            if (success) {\r\n+                              ScaffoldMessenger.of(context).showSnackBar(\r\n+                                const SnackBar(content: Text(\"Login Successful!\")),\r\n                               );\r\n-                              \r\n-                              if (viewModel.errorMessage.isEmpty) {\r\n-                                Navigator.pushReplacement(\r\n-                                  context,\r\n-                                  MaterialPageRoute(\r\n-                                    builder: (_) => WebViewScreen(\r\n\\ No newline at end of file\n-                                      baseUrl: widget.baseUrl,\r\n-                                      username: _usernameController.text,\r\n-                                      password: _passwordController.text,\r\n-                                    ),\r\n-                                  ),\r\n-                                );\r\n-                              }\r\n+                              // Proceed further after successful login (e.g., navigate to a dashboard)\r\n+                            } else {\r\n+                              ScaffoldMessenger.of(context).showSnackBar(\r\n+                                const SnackBar(content: Text(\"Login Failed\")),\r\n+                              );\r\n                             }\r\n                           },\r\n-                    child: const Text('Login'),\r\n+                    child: const Text(AppConstants.loginButtonText),\r\n                   ),\r\n-                  if (viewModel.isLoading)\r\n-                    const Padding(\r\n-                      padding: EdgeInsets.all(8.0),\r\n-                      child: CircularProgressIndicator(),\r\n-                    ),\r\n+                  if (viewModel.isLoading) ...[\r\n+                    const SizedBox(height: 20),\r\n+                    const CircularProgressIndicator(),\r\n+                  ],\r\n                 ],\r\n               ),\r\n             );\r\n           },\r\n         ),\r\n       ),\r\n     );\r\n   }\r\n-}\n+}\r\n"
                },
                {
                    "date": 1742151568172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n                   ElevatedButton(\r\n                     onPressed: viewModel.isLoading\r\n                         ? null\r\n                         : () async {\r\n-                            bool success = await viewModel.login();\r\n+                            bool success = await viewModel.login(viewModel.username, viewModel.password, baseUrl);\r\n                             if (success) {\r\n                               ScaffoldMessenger.of(context).showSnackBar(\r\n                                 const SnackBar(content: Text(\"Login Successful!\")),\r\n                               );\r\n"
                },
                {
                    "date": 1742151659147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n                   ElevatedButton(\r\n                     onPressed: viewModel.isLoading\r\n                         ? null\r\n                         : () async {\r\n-                            bool success = await viewModel.login(viewModel.username, viewModel.password, baseUrl);\r\n+                            bool success = await viewModel.login(baseUrl);\r\n                             if (success) {\r\n                               ScaffoldMessenger.of(context).showSnackBar(\r\n                                 const SnackBar(content: Text(\"Login Successful!\")),\r\n                               );\r\n"
                },
                {
                    "date": 1742151965515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n                   ElevatedButton(\r\n                     onPressed: viewModel.isLoading\r\n                         ? null\r\n                         : () async {\r\n-                            bool success = await viewModel.login(baseUrl);\r\n+                            bool success = await viewModel.login();\r\n                             if (success) {\r\n                               ScaffoldMessenger.of(context).showSnackBar(\r\n                                 const SnackBar(content: Text(\"Login Successful!\")),\r\n                               );\r\n"
                },
                {
                    "date": 1742152000278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,8 +41,9 @@\n                   ElevatedButton(\r\n                     onPressed: viewModel.isLoading\r\n                         ? null\r\n                         : () async {\r\n+                            viewModel.printInputs();\r\n                             bool success = await viewModel.login();\r\n                             if (success) {\r\n                               ScaffoldMessenger.of(context).showSnackBar(\r\n                                 const SnackBar(content: Text(\"Login Successful!\")),\r\n"
                },
                {
                    "date": 1742154409066,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,8 @@\n                   ElevatedButton(\r\n                     onPressed: viewModel.isLoading\r\n                         ? null\r\n                         : () async {\r\n-                            viewModel.printInputs();\r\n                             bool success = await viewModel.login();\r\n                             if (success) {\r\n                               ScaffoldMessenger.of(context).showSnackBar(\r\n                                 const SnackBar(content: Text(\"Login Successful!\")),\r\n"
                },
                {
                    "date": 1742154446288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,8 +36,16 @@\n                     ),\r\n                     obscureText: true,\r\n                     onChanged: viewModel.setPassword,\r\n                   ),\r\n+                  const SizedBox(height: 10),\r\n+                  // Remember Me checkbox\r\n+                  CheckboxListTile(\r\n+                    title: const Text(\"Remember Me\"),\r\n+                    value: viewModel.rememberMe,\r\n+                    onChanged: viewModel.toggleRememberMe,\r\n+                    controlAffinity: ListTileControlAffinity.leading,\r\n+                  ),\r\n                   const SizedBox(height: 20),\r\n                   ElevatedButton(\r\n                     onPressed: viewModel.isLoading\r\n                         ? null\r\n"
                },
                {
                    "date": 1742154763443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,8 +26,10 @@\n                       labelText: \"Username\",\r\n                       border: OutlineInputBorder(),\r\n                     ),\r\n                     onChanged: viewModel.setUsername,\r\n+                    controller:\r\n+                        TextEditingController(text: viewModel.username),\r\n                   ),\r\n                   const SizedBox(height: 20),\r\n                   TextField(\r\n                     decoration: const InputDecoration(\r\n@@ -35,11 +37,12 @@\n                       border: OutlineInputBorder(),\r\n                     ),\r\n                     obscureText: true,\r\n                     onChanged: viewModel.setPassword,\r\n+                    controller:\r\n+                        TextEditingController(text: viewModel.password),\r\n                   ),\r\n                   const SizedBox(height: 10),\r\n-                  // Remember Me checkbox\r\n                   CheckboxListTile(\r\n                     title: const Text(\"Remember Me\"),\r\n                     value: viewModel.rememberMe,\r\n                     onChanged: viewModel.toggleRememberMe,\r\n@@ -51,16 +54,17 @@\n                         ? null\r\n                         : () async {\r\n                             bool success = await viewModel.login();\r\n                             if (success) {\r\n-                              ScaffoldMessenger.of(context).showSnackBar(\r\n-                                const SnackBar(content: Text(\"Login Successful!\")),\r\n-                              );\r\n-                              // Proceed further after successful login (e.g., navigate to a dashboard)\r\n+                              ScaffoldMessenger.of(context)\r\n+                                  .showSnackBar(const SnackBar(\r\n+                                      content:\r\n+                                          Text(\"Login Successful!\")));\r\n+                              // Navigate to dashboard or next screen here\r\n                             } else {\r\n-                              ScaffoldMessenger.of(context).showSnackBar(\r\n-                                const SnackBar(content: Text(\"Login Failed\")),\r\n-                              );\r\n+                              ScaffoldMessenger.of(context)\r\n+                                  .showSnackBar(const SnackBar(\r\n+                                      content: Text(\"Login Failed\")));\r\n                             }\r\n                           },\r\n                     child: const Text(AppConstants.loginButtonText),\r\n                   ),\r\n"
                },
                {
                    "date": 1742159684270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,13 +54,14 @@\n                         ? null\r\n                         : () async {\r\n                             bool success = await viewModel.login();\r\n                             if (success) {\r\n-                              ScaffoldMessenger.of(context)\r\n-                                  .showSnackBar(const SnackBar(\r\n-                                      content:\r\n-                                          Text(\"Login Successful!\")));\r\n-                              // Navigate to dashboard or next screen here\r\n+                              Navigator.pushReplacement(\r\n+                                context,\r\n+                                MaterialPageRoute(\r\n+                                  builder: (_) => PostLoginChoiceScreen(baseUrl: baseUrl, token: token),\r\n+                                ),\r\n+                              );\r\n                             } else {\r\n                               ScaffoldMessenger.of(context)\r\n                                   .showSnackBar(const SnackBar(\r\n                                       content: Text(\"Login Failed\")));\r\n"
                },
                {
                    "date": 1742159737318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n                             if (success) {\r\n                               Navigator.pushReplacement(\r\n                                 context,\r\n                                 MaterialPageRoute(\r\n-                                  builder: (_) => PostLoginChoiceScreen(baseUrl: baseUrl, token: token),\r\n+                                  builder: (_) => PostLoginScreen(baseUrl: baseUrl, token: token),\r\n                                 ),\r\n                               );\r\n                             } else {\r\n                               ScaffoldMessenger.of(context)\r\n"
                },
                {
                    "date": 1742160191229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import 'package:aybudle/core/constants/app_constants.dart';\r\n+import 'package:aybudle/features/connection/presentation/screens/post_login_screen.dart';\r\n import 'package:aybudle/features/connection/presentation/view_models/login_view_model.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:provider/provider.dart';\r\n \r\n@@ -57,9 +58,9 @@\n                             if (success) {\r\n                               Navigator.pushReplacement(\r\n                                 context,\r\n                                 MaterialPageRoute(\r\n-                                  builder: (_) => PostLoginScreen(baseUrl: baseUrl, token: token),\r\n+                                  builder: (_) => PostLoginScreen(baseUrl: baseUrl, token: viewModel.getToken()),\r\n                                 ),\r\n                               );\r\n                             } else {\r\n                               ScaffoldMessenger.of(context)\r\n"
                }
            ],
            "date": 1742130466297,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\r\nimport 'package:provider/provider.dart';\r\nimport '../view_models/login_view_model.dart';\r\n\r\nclass LoginScreen extends StatefulWidget {\r\n  final String baseUrl;\r\n\r\n  const LoginScreen({super.key, required this.baseUrl});\r\n\r\n  @override\r\n  _LoginScreenState createState() => _LoginScreenState();\r\n}\r\n\r\nclass _LoginScreenState extends State<LoginScreen> {\r\n  final _formKey = GlobalKey<FormState>();\r\n  final _usernameController = TextEditingController();\r\n  final _passwordController = TextEditingController();\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: AppBar(title: const Text('Moodle Login')),\r\n      body: Padding(\r\n        padding: const EdgeInsets.all(16.0),\r\n        child: Consumer<LoginViewModel>(\r\n          builder: (context, viewModel, _) {\r\n            return Form(\r\n              key: _formKey,\r\n              child: Column(\r\n                children: [\r\n                  TextFormField(\r\n                    controller: _usernameController,\r\n                    decoration: const InputDecoration(\r\n                      labelText: 'Username',\r\n                      border: OutlineInputBorder(),\r\n                    ),\r\n                    validator: (value) => value?.isEmpty ?? true ? 'Required' : null,\r\n                  ),\r\n                  const SizedBox(height: 20),\r\n                  TextFormField(\r\n                    controller: _passwordController,\r\n                    obscureText: true,\r\n                    decoration: const InputDecoration(\r\n                      labelText: 'Password',\r\n                      border: OutlineInputBorder(),\r\n                    ),\r\n                    validator: (value) => value?.isEmpty ?? true ? 'Required' : null,\r\n                  ),\r\n                  const SizedBox(height: 20),\r\n                  if (viewModel.errorMessage.isNotEmpty)\r\n                    Text(\r\n                      viewModel.errorMessage,\r\n                      style: const TextStyle(color: Colors.red),\r\n                    ),\r\n                  const SizedBox(height: 20),\r\n                  ElevatedButton(\r\n                    onPressed: viewModel.isLoading\r\n                        ? null\r\n                        : () async {\r\n                            if (_formKey.currentState?.validate() ?? false) {\r\n                              await viewModel.login(\r\n                                baseUrl: widget.baseUrl,\r\n                                username: _usernameController.text,\r\n                                password: _passwordController.text,\r\n                              );\r\n                              \r\n                              if (viewModel.errorMessage.isEmpty) {\r\n                                // Navigate to courses screen\r\n                              }\r\n                            }\r\n                          },\r\n                    child: const Text('Login'),\r\n                  ),\r\n                  if (viewModel.isLoading)\r\n                    const Padding(\r\n                      padding: EdgeInsets.all(8.0),\r\n                      child: CircularProgressIndicator(),\r\n                    ),\r\n                ],\r\n              ),\r\n            );\r\n          },\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}"
        }
    ]
}