{
    "sourceFile": "lib/core/services/api_service.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 49,
            "patches": [
                {
                    "date": 1742123178345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1742137397817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,5 +10,27 @@\n     } catch (e) {\r\n       return false;\r\n     }\r\n   }\r\n-}\n\\ No newline at end of file\n+\r\n+  Future<bool> login(String baseUrl, String username, String password) async {\r\n+    try {\r\n+      // Assuming the Moodle login endpoint is at \"<baseUrl>/login/token.php\"\r\n+      final response = await _dio.post(\r\n+        \"$baseUrl/login/token.php\",\r\n+        data: {\r\n+          \"username\": username,\r\n+          \"password\": password,\r\n+          \"service\": \"moodle_mobile_app\",\r\n+        },\r\n+      );\r\n+\r\n+      // Check if login was successful (i.e., token exists)\r\n+      if (response.statusCode == 200 && response.data[\"token\"] != null) {\r\n+        return true;\r\n+      }\r\n+      return false;\r\n+    } catch (e) {\r\n+      return false;\r\n+    }\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1742137771598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n   Future<bool> login(String baseUrl, String username, String password) async {\r\n     try {\r\n       // Assuming the Moodle login endpoint is at \"<baseUrl>/login/token.php\"\r\n       final response = await _dio.post(\r\n-        \"$baseUrl/login/token.php\",\r\n+        \"$baseUrl/login/index.php\",\r\n         data: {\r\n           \"username\": username,\r\n           \"password\": password,\r\n           \"service\": \"moodle_mobile_app\",\r\n"
                },
                {
                    "date": 1742138806053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n   Future<bool> login(String baseUrl, String username, String password) async {\r\n     try {\r\n       // Assuming the Moodle login endpoint is at \"<baseUrl>/login/token.php\"\r\n       final response = await _dio.post(\r\n-        \"$baseUrl/login/index.php\",\r\n+        \"$baseUrl/login/token.php\",\r\n         data: {\r\n           \"username\": username,\r\n           \"password\": password,\r\n           \"service\": \"moodle_mobile_app\",\r\n"
                },
                {
                    "date": 1742138869579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n         \"$baseUrl/login/token.php\",\r\n         data: {\r\n           \"username\": username,\r\n           \"password\": password,\r\n-          \"service\": \"moodle_mobile_app\",\r\n+          \"service\": 'moodle_mobile_app',\r\n         },\r\n       );\r\n \r\n       // Check if login was successful (i.e., token exists)\r\n"
                },
                {
                    "date": 1742142125625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n         \"$baseUrl/login/token.php\",\r\n         data: {\r\n           \"username\": username,\r\n           \"password\": password,\r\n-          \"service\": 'moodle_mobile_app',\r\n+          \"service\": \"moodle_mobile_app\",\r\n         },\r\n       );\r\n \r\n       // Check if login was successful (i.e., token exists)\r\n"
                },
                {
                    "date": 1742152457828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,19 +13,16 @@\n   }\r\n \r\n   Future<bool> login(String baseUrl, String username, String password) async {\r\n     try {\r\n-      // Assuming the Moodle login endpoint is at \"<baseUrl>/login/token.php\"\r\n-      final response = await _dio.post(\r\n+      final response = await _dio.get(\r\n         \"$baseUrl/login/token.php\",\r\n         data: {\r\n           \"username\": username,\r\n           \"password\": password,\r\n           \"service\": \"moodle_mobile_app\",\r\n         },\r\n       );\r\n-\r\n-      // Check if login was successful (i.e., token exists)\r\n       if (response.statusCode == 200 && response.data[\"token\"] != null) {\r\n         return true;\r\n       }\r\n       return false;\r\n"
                },
                {
                    "date": 1742152467704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n         \"$baseUrl/login/token.php\",\r\n         data: {\r\n           \"username\": username,\r\n           \"password\": password,\r\n-          \"service\": \"moodle_mobile_app\",\r\n+          \"service\": 'moodle_mobile_app',\r\n         },\r\n       );\r\n       if (response.statusCode == 200 && response.data[\"token\"] != null) {\r\n         return true;\r\n"
                },
                {
                    "date": 1742152491403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,9 @@\n           \"service\": 'moodle_mobile_app',\r\n         },\r\n       );\r\n       if (response.statusCode == 200 && response.data[\"token\"] != null) {\r\n+        print(\"JPZSDFVJIOFVSJVDFJKLBDJJKJLBDFKDFBJLLJKBDFJKDFLB\");\r\n         return true;\r\n       }\r\n       return false;\r\n     } catch (e) {\r\n"
                },
                {
                    "date": 1742152596439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,14 +14,9 @@\n \r\n   Future<bool> login(String baseUrl, String username, String password) async {\r\n     try {\r\n       final response = await _dio.get(\r\n-        \"$baseUrl/login/token.php\",\r\n-        data: {\r\n-          \"username\": username,\r\n-          \"password\": password,\r\n-          \"service\": 'moodle_mobile_app',\r\n-        },\r\n+        \"$baseUrl/login/token.php?username=$username&password=$password&service=moodle_mobile_app\",\r\n       );\r\n       if (response.statusCode == 200 && response.data[\"token\"] != null) {\r\n         print(\"JPZSDFVJIOFVSJVDFJKLBDJJKJLBDFKDFBJLLJKBDFJKDFLB\");\r\n         return true;\r\n"
                },
                {
                    "date": 1742152784116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,9 @@\n   }\r\n \r\n   Future<bool> login(String baseUrl, String username, String password) async {\r\n     try {\r\n+      print(\"$baseUrl/login/token.php?username=$username&password=$password&service=moodle_mobile_app\");\r\n       final response = await _dio.get(\r\n         \"$baseUrl/login/token.php?username=$username&password=$password&service=moodle_mobile_app\",\r\n       );\r\n       if (response.statusCode == 200 && response.data[\"token\"] != null) {\r\n"
                },
                {
                    "date": 1742153014237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,9 @@\n       print(\"$baseUrl/login/token.php?username=$username&password=$password&service=moodle_mobile_app\");\r\n       final response = await _dio.get(\r\n         \"$baseUrl/login/token.php?username=$username&password=$password&service=moodle_mobile_app\",\r\n       );\r\n+      print(response.data);\r\n       if (response.statusCode == 200 && response.data[\"token\"] != null) {\r\n         print(\"JPZSDFVJIOFVSJVDFJKLBDJJKJLBDFKDFBJLLJKBDFJKDFLB\");\r\n         return true;\r\n       }\r\n"
                },
                {
                    "date": 1742154032232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,8 @@\n         \"$baseUrl/login/token.php?username=$username&password=$password&service=moodle_mobile_app\",\r\n       );\r\n       print(response.data);\r\n       if (response.statusCode == 200 && response.data[\"token\"] != null) {\r\n-        print(\"JPZSDFVJIOFVSJVDFJKLBDJJKJLBDFKDFBJLLJKBDFJKDFLB\");\r\n         return true;\r\n       }\r\n       return false;\r\n     } catch (e) {\r\n"
                },
                {
                    "date": 1742154045744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,13 +13,11 @@\n   }\r\n \r\n   Future<bool> login(String baseUrl, String username, String password) async {\r\n     try {\r\n-      print(\"$baseUrl/login/token.php?username=$username&password=$password&service=moodle_mobile_app\");\r\n       final response = await _dio.get(\r\n         \"$baseUrl/login/token.php?username=$username&password=$password&service=moodle_mobile_app\",\r\n       );\r\n-      print(response.data);\r\n       if (response.statusCode == 200 && response.data[\"token\"] != null) {\r\n         return true;\r\n       }\r\n       return false;\r\n"
                },
                {
                    "date": 1742154094794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,13 +11,21 @@\n       return false;\r\n     }\r\n   }\r\n \r\n-  Future<bool> login(String baseUrl, String username, String password) async {\r\n+   Future<bool> login(String baseUrl, String username, String password) async {\r\n     try {\r\n-      final response = await _dio.get(\r\n-        \"$baseUrl/login/token.php?username=$username&password=$password&service=moodle_mobile_app\",\r\n+      // Assuming the Moodle login endpoint is at \"<baseUrl>/login/token.php\"\r\n+      final response = await _dio.post(\r\n+        \"$baseUrl/login/token.php\",\r\n+        data: {\r\n+          \"username\": username,\r\n+          \"password\": password,\r\n+          \"service\": \"moodle_mobile_app\",\r\n+        },\r\n       );\r\n+\r\n+      // Check if login was successful (i.e., token exists)\r\n       if (response.statusCode == 200 && response.data[\"token\"] != null) {\r\n         return true;\r\n       }\r\n       return false;\r\n"
                },
                {
                    "date": 1742154164765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n         \"$baseUrl/login/token.php\",\r\n         data: {\r\n           \"username\": username,\r\n           \"password\": password,\r\n-          \"service\": \"moodle_mobile_app\",\r\n+          \"service\": 'moodle_mobile_app',\r\n         },\r\n       );\r\n \r\n       // Check if login was successful (i.e., token exists)\r\n"
                },
                {
                    "date": 1742154229314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,21 +11,13 @@\n       return false;\r\n     }\r\n   }\r\n \r\n-   Future<bool> login(String baseUrl, String username, String password) async {\r\n+  Future<bool> login(String baseUrl, String username, String password) async {\r\n     try {\r\n-      // Assuming the Moodle login endpoint is at \"<baseUrl>/login/token.php\"\r\n-      final response = await _dio.post(\r\n-        \"$baseUrl/login/token.php\",\r\n-        data: {\r\n-          \"username\": username,\r\n-          \"password\": password,\r\n-          \"service\": 'moodle_mobile_app',\r\n-        },\r\n+      final response = await _dio.get(\r\n+        \"$baseUrl/login/token.php?username=$username&password=$password&service=moodle_mobile_app\",\r\n       );\r\n-\r\n-      // Check if login was successful (i.e., token exists)\r\n       if (response.statusCode == 200 && response.data[\"token\"] != null) {\r\n         return true;\r\n       }\r\n       return false;\r\n"
                },
                {
                    "date": 1742154535828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,9 @@\n       final response = await _dio.get(\r\n         \"$baseUrl/login/token.php?username=$username&password=$password&service=moodle_mobile_app\",\r\n       );\r\n       if (response.statusCode == 200 && response.data[\"token\"] != null) {\r\n+        print(response.data);\r\n         return true;\r\n       }\r\n       return false;\r\n     } catch (e) {\r\n"
                },
                {
                    "date": 1742160120599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n+import 'dart:ffi';\r\n+\r\n import 'package:dio/dio.dart';\r\n \r\n class ApiService {\r\n   final Dio _dio = Dio();\r\n@@ -11,19 +13,19 @@\n       return false;\r\n     }\r\n   }\r\n \r\n-  Future<bool> login(String baseUrl, String username, String password) async {\r\n+  Future<List> login(String baseUrl, String username, String password) async {\r\n     try {\r\n       final response = await _dio.get(\r\n         \"$baseUrl/login/token.php?username=$username&password=$password&service=moodle_mobile_app\",\r\n       );\r\n       if (response.statusCode == 200 && response.data[\"token\"] != null) {\r\n         print(response.data);\r\n-        return true;\r\n+        return [true, response.data[\"token\"]];\r\n       }\r\n-      return false;\r\n+      return [false,null];\r\n     } catch (e) {\r\n-      return false;\r\n+      return [false,null];\r\n     }\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1742160895026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n         \"$baseUrl/login/token.php?username=$username&password=$password&service=moodle_mobile_app\",\r\n       );\r\n       if (response.statusCode == 200 && response.data[\"token\"] != null) {\r\n         print(response.data);\r\n-        return [true, response.data[\"token\"]];\r\n+        return [true, response.data[\"private_token\"]];\r\n       }\r\n       return [false,null];\r\n     } catch (e) {\r\n       return [false,null];\r\n"
                },
                {
                    "date": 1742160903747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n         \"$baseUrl/login/token.php?username=$username&password=$password&service=moodle_mobile_app\",\r\n       );\r\n       if (response.statusCode == 200 && response.data[\"token\"] != null) {\r\n         print(response.data);\r\n-        return [true, response.data[\"private_token\"]];\r\n+        return [true, response.data[\"privatetoken\"]];\r\n       }\r\n       return [false,null];\r\n     } catch (e) {\r\n       return [false,null];\r\n"
                },
                {
                    "date": 1742160952209,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n         \"$baseUrl/login/token.php?username=$username&password=$password&service=moodle_mobile_app\",\r\n       );\r\n       if (response.statusCode == 200 && response.data[\"token\"] != null) {\r\n         print(response.data);\r\n-        return [true, response.data[\"privatetoken\"]];\r\n+        return [true, response.data[\"token\"]];\r\n       }\r\n       return [false,null];\r\n     } catch (e) {\r\n       return [false,null];\r\n"
                },
                {
                    "date": 1742921146217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,5 +27,40 @@\n     } catch (e) {\r\n       return [false,null];\r\n     }\r\n   }\r\n+\r\n+  Future<Map<String, dynamic>> getUserInfo(String baseUrl, String token) async {\r\n+    try {\r\n+      final response = await _dio.get(\r\n+        \"$baseUrl/webservice/rest/server.php\",\r\n+        queryParameters: {\r\n+          'wstoken': token,\r\n+          'wsfunction': 'core_webservice_get_site_info',\r\n+          'moodlewsrestformat': 'json',\r\n+        },\r\n+      );\r\n+      return response.data;\r\n+    } catch (e) {\r\n+      throw Exception('Failed to get user info: $e');\r\n+    }\r\n+  }\r\n+\r\n+  Future<List<dynamic>> getNotifications(String baseUrl, String token, int userId) async {\r\n+    try {\r\n+      final response = await _dio.get(\r\n+        \"$baseUrl/webservice/rest/server.php\",\r\n+        queryParameters: {\r\n+          'wstoken': token,\r\n+          'wsfunction': 'core_message_get_messages',\r\n+          'moodlewsrestformat': 'json',\r\n+          'useridto': userId,\r\n+          'type': 'notifications',\r\n+        },\r\n+      );\r\n+      return response.data['messages'] ?? [];\r\n+    } catch (e) {\r\n+      throw Exception('Failed to get notifications: $e');\r\n+    }\r\n+  }\r\n }\r\n+\r\n"
                },
                {
                    "date": 1742922036578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,8 +46,19 @@\n   }\r\n \r\n   Future<List<dynamic>> getNotifications(String baseUrl, String token, int userId) async {\r\n     try {\r\n+      print('\\n=== API Call Parameters ===');\r\n+      print('URL: $baseUrl/webservice/rest/server.php');\r\n+      print('Parameters:');\r\n+      print({\r\n+        'wstoken': 'REDACTED', // Don't print actual token\r\n+        'wsfunction': 'core_message_get_messages',\r\n+        'moodlewsrestformat': 'json',\r\n+        'useridto': userId,\r\n+        'type': 'notifications',\r\n+      });\r\n+\r\n       final response = await _dio.get(\r\n         \"$baseUrl/webservice/rest/server.php\",\r\n         queryParameters: {\r\n           'wstoken': token,\r\n@@ -56,11 +67,20 @@\n           'useridto': userId,\r\n           'type': 'notifications',\r\n         },\r\n       );\r\n+\r\n+      print('\\n=== Raw API Response ===');\r\n+      print('Status Code: ${response.statusCode}');\r\n+      print('Headers: ${response.headers}');\r\n+      print('Response Data:');\r\n+      print(response.data);\r\n+\r\n       return response.data['messages'] ?? [];\r\n     } catch (e) {\r\n-      throw Exception('Failed to get notifications: $e');\r\n+      print('\\n=== Error in getNotifications ===');\r\n+      print('Error details: $e');\r\n+      rethrow;\r\n     }\r\n   }\r\n }\r\n \r\n"
                },
                {
                    "date": 1742922230068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,41 +46,25 @@\n   }\r\n \r\n   Future<List<dynamic>> getNotifications(String baseUrl, String token, int userId) async {\r\n     try {\r\n-      print('\\n=== API Call Parameters ===');\r\n-      print('URL: $baseUrl/webservice/rest/server.php');\r\n-      print('Parameters:');\r\n-      print({\r\n-        'wstoken': 'REDACTED', // Don't print actual token\r\n-        'wsfunction': 'core_message_get_messages',\r\n-        'moodlewsrestformat': 'json',\r\n-        'useridto': userId,\r\n-        'type': 'notifications',\r\n-      });\r\n-\r\n+      // Try alternative API endpoints\r\n       final response = await _dio.get(\r\n         \"$baseUrl/webservice/rest/server.php\",\r\n         queryParameters: {\r\n           'wstoken': token,\r\n-          'wsfunction': 'core_message_get_messages',\r\n+          'wsfunction': 'core_message_get_popup_notifications', // Alternative 1\r\n+          // 'wsfunction': 'core_message_get_notifications',    // Alternative 2\r\n           'moodlewsrestformat': 'json',\r\n           'useridto': userId,\r\n-          'type': 'notifications',\r\n+          'limitnum': 20,  // Add pagination\r\n         },\r\n       );\r\n \r\n-      print('\\n=== Raw API Response ===');\r\n-      print('Status Code: ${response.statusCode}');\r\n-      print('Headers: ${response.headers}');\r\n-      print('Response Data:');\r\n-      print(response.data);\r\n-\r\n-      return response.data['messages'] ?? [];\r\n+      return response.data['notifications'] ?? [];\r\n     } catch (e) {\r\n-      print('\\n=== Error in getNotifications ===');\r\n-      print('Error details: $e');\r\n-      rethrow;\r\n+      print('Error trying alternative notification APIs: $e');\r\n+      return [];\r\n     }\r\n   }\r\n }\r\n \r\n"
                },
                {
                    "date": 1742922300122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,10 +51,10 @@\n       final response = await _dio.get(\r\n         \"$baseUrl/webservice/rest/server.php\",\r\n         queryParameters: {\r\n           'wstoken': token,\r\n-          'wsfunction': 'core_message_get_popup_notifications', // Alternative 1\r\n-          // 'wsfunction': 'core_message_get_notifications',    // Alternative 2\r\n+          //'wsfunction': 'core_message_get_popup_notifications', // Alternative 1\r\n+           'wsfunction': 'core_message_get_notifications',    // Alternative 2\r\n           'moodlewsrestformat': 'json',\r\n           'useridto': userId,\r\n           'limitnum': 20,  // Add pagination\r\n         },\r\n"
                },
                {
                    "date": 1742995942808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,47 @@\n \r\n class ApiService {\r\n   final Dio _dio = Dio();\r\n \r\n+  ApiService() {\r\n+    // Add this interceptor for testing notifications\r\n+    if (kDebugMode) { // Only in debug mode\r\n+      _dio.interceptors.add(InterceptorsWrapper(\r\n+        onRequest: (options, handler) {\r\n+          // Check if it's a notifications request\r\n+          if (options.queryParameters['wsfunction'] == 'core_message_get_notifications') {\r\n+            // Mock response data\r\n+            final mockNotifications = [\r\n+              {\r\n+                'id': 1,\r\n+                'subject': 'Mock Notification 1',\r\n+                'smallmessage': 'This is a test notification!',\r\n+                'timecreated': DateTime.now().subtract(const Duration(minutes: 5)).millisecondsSinceEpoch ~/ 1000,\r\n+              },\r\n+              {\r\n+                'id': 2,\r\n+                'subject': 'Assignment Due',\r\n+                'smallmessage': 'Your assignment is due tomorrow!',\r\n+                'timecreated': DateTime.now().subtract(const Duration(hours: 2)).millisecondsSinceEpoch ~/ 1000,\r\n+              },\r\n+            ];\r\n+\r\n+            // Simulate a successful response\r\n+            handler.resolve(\r\n+              Response(\r\n+                requestOptions: options,\r\n+                data: {'notifications': mockNotifications},\r\n+              ),\r\n+            );\r\n+            return;\r\n+          }\r\n+          // Continue with the original request for other APIs\r\n+          handler.next(options);\r\n+        },\r\n+      ));\r\n+    }\r\n+  }\r\n+\r\n   Future<bool> validateMoodleUrl(String url) async {\r\n     try {\r\n       final response = await _dio.get(url);\r\n       return response.statusCode == 200;\r\n"
                },
                {
                    "date": 1742996028310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import 'package:dio/dio.dart';\r\n \r\n class ApiService {\r\n   final Dio _dio = Dio();\r\n+  var kDebugMode = true;\r\n \r\n   ApiService() {\r\n     // Add this interceptor for testing notifications\r\n     if (kDebugMode) { // Only in debug mode\r\n"
                },
                {
                    "date": 1742998270468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import 'package:dio/dio.dart';\r\n \r\n class ApiService {\r\n   final Dio _dio = Dio();\r\n-  var kDebugMode = true;\r\n+  var kDebugMode = false;\r\n \r\n   ApiService() {\r\n     // Add this interceptor for testing notifications\r\n     if (kDebugMode) { // Only in debug mode\r\n"
                },
                {
                    "date": 1743059094874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,110 @@\n+import 'dart:ffi';\r\n+\r\n+import 'package:dio/dio.dart';\r\n+\r\n+class ApiService {\r\n+  final Dio _dio = Dio();\r\n+  var kDebugMode = false;\r\n+\r\n+  ApiService() {\r\n+    // Add this interceptor for testing notifications\r\n+    if (kDebugMode) { // Only in debug mode\r\n+      _dio.interceptors.add(InterceptorsWrapper(\r\n+        onRequest: (options, handler) {\r\n+          // Check if it's a notifications request\r\n+          if (options.queryParameters['wsfunction'] == 'core_message_get_notifications') {\r\n+            // Mock response data\r\n+            final mockNotifications = [\r\n+              {\r\n+                'id': 1,\r\n+                'subject': 'Mock Notification 1',\r\n+                'smallmessage': 'This is a test notification!',\r\n+                'timecreated': DateTime.now().subtract(const Duration(minutes: 5)).millisecondsSinceEpoch ~/ 1000,\r\n+              },\r\n+              {\r\n+                'id': 2,\r\n+                'subject': 'Assignment Due',\r\n+                'smallmessage': 'Your assignment is due tomorrow!',\r\n+                'timecreated': DateTime.now().subtract(const Duration(hours: 2)).millisecondsSinceEpoch ~/ 1000,\r\n+              },\r\n+            ];\r\n+\r\n+            // Simulate a successful response\r\n+            handler.resolve(\r\n+              Response(\r\n+                requestOptions: options,\r\n+                data: {'notifications': mockNotifications},\r\n+              ),\r\n+            );\r\n+            return;\r\n+          }\r\n+          // Continue with the original request for other APIs\r\n+          handler.next(options);\r\n+        },\r\n+      ));\r\n+    }\r\n+  }\r\n+\r\n+  Future<bool> validateMoodleUrl(String url) async {\r\n+    try {\r\n+      final response = await _dio.get(url);\r\n+      return response.statusCode == 200;\r\n+    } catch (e) {\r\n+      return false;\r\n+    }\r\n+  }\r\n+\r\n+  Future<List> login(String baseUrl, String username, String password) async {\r\n+    try {\r\n+      final response = await _dio.get(\r\n+        \"$baseUrl/login/token.php?username=$username&password=$password&service=moodle_mobile_app\",\r\n+      );\r\n+      if (response.statusCode == 200 && response.data[\"token\"] != null) {\r\n+        print(response.data);\r\n+        return [true, response.data[\"token\"]];\r\n+      }\r\n+      return [false,null];\r\n+    } catch (e) {\r\n+      return [false,null];\r\n+    }\r\n+  }\r\n+\r\n+  Future<Map<String, dynamic>> getUserInfo(String baseUrl, String token) async {\r\n+    try {\r\n+      final response = await _dio.get(\r\n+        \"$baseUrl/webservice/rest/server.php\",\r\n+        queryParameters: {\r\n+          'wstoken': token,\r\n+          'wsfunction': 'core_webservice_get_site_info',\r\n+          'moodlewsrestformat': 'json',\r\n+        },\r\n+      );\r\n+      return response.data;\r\n+    } catch (e) {\r\n+      throw Exception('Failed to get user info: $e');\r\n+    }\r\n+  }\r\n+\r\n+  Future<List<dynamic>> getNotifications(String baseUrl, String token, int userId) async {\r\n+    try {\r\n+      // Try alternative API endpoints\r\n+      final response = await _dio.get(\r\n+        \"$baseUrl/webservice/rest/server.php\",\r\n+        queryParameters: {\r\n+          'wstoken': token,\r\n+          //'wsfunction': 'core_message_get_popup_notifications', // Alternative 1\r\n+          'wsfunction': 'core_message_get_notifications',    // Alternative 2\r\n+          'moodlewsrestformat': 'json',\r\n+          'useridto': userId,\r\n+          'limitnum': 20,  // Add pagination\r\n+        },\r\n+      );\r\n+\r\n+      return response.data['notifications'] ?? [];\r\n+    } catch (e) {\r\n+      print('Error trying alternative notification APIs: $e');\r\n+      return [];\r\n+    }\r\n+  }\r\n+}\r\n+\r\n"
                },
                {
                    "date": 1743059956389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import 'package:dio/dio.dart';\r\n \r\n class ApiService {\r\n   final Dio _dio = Dio();\r\n-  var kDebugMode = false;\r\n+  var kDebugMode = true;\r\n \r\n   ApiService() {\r\n     // Add this interceptor for testing notifications\r\n     if (kDebugMode) { // Only in debug mode\r\n@@ -107,114 +107,4 @@\n     }\r\n   }\r\n }\r\n \r\n-import 'dart:ffi';\r\n-\r\n-import 'package:dio/dio.dart';\r\n-\r\n-class ApiService {\r\n-  final Dio _dio = Dio();\r\n-  var kDebugMode = false;\r\n-\r\n-  ApiService() {\r\n-    // Add this interceptor for testing notifications\r\n-    if (kDebugMode) { // Only in debug mode\r\n-      _dio.interceptors.add(InterceptorsWrapper(\r\n-        onRequest: (options, handler) {\r\n-          // Check if it's a notifications request\r\n-          if (options.queryParameters['wsfunction'] == 'core_message_get_notifications') {\r\n-            // Mock response data\r\n-            final mockNotifications = [\r\n-              {\r\n-                'id': 1,\r\n-                'subject': 'Mock Notification 1',\r\n-                'smallmessage': 'This is a test notification!',\r\n-                'timecreated': DateTime.now().subtract(const Duration(minutes: 5)).millisecondsSinceEpoch ~/ 1000,\r\n-              },\r\n-              {\r\n-                'id': 2,\r\n-                'subject': 'Assignment Due',\r\n-                'smallmessage': 'Your assignment is due tomorrow!',\r\n-                'timecreated': DateTime.now().subtract(const Duration(hours: 2)).millisecondsSinceEpoch ~/ 1000,\r\n-              },\r\n-            ];\r\n-\r\n-            // Simulate a successful response\r\n-            handler.resolve(\r\n-              Response(\r\n-                requestOptions: options,\r\n-                data: {'notifications': mockNotifications},\r\n-              ),\r\n-            );\r\n-            return;\r\n-          }\r\n-          // Continue with the original request for other APIs\r\n-          handler.next(options);\r\n-        },\r\n-      ));\r\n-    }\r\n-  }\r\n-\r\n-  Future<bool> validateMoodleUrl(String url) async {\r\n-    try {\r\n-      final response = await _dio.get(url);\r\n-      return response.statusCode == 200;\r\n-    } catch (e) {\r\n-      return false;\r\n-    }\r\n-  }\r\n-\r\n-  Future<List> login(String baseUrl, String username, String password) async {\r\n-    try {\r\n-      final response = await _dio.get(\r\n-        \"$baseUrl/login/token.php?username=$username&password=$password&service=moodle_mobile_app\",\r\n-      );\r\n-      if (response.statusCode == 200 && response.data[\"token\"] != null) {\r\n-        print(response.data);\r\n-        return [true, response.data[\"token\"]];\r\n-      }\r\n-      return [false,null];\r\n-    } catch (e) {\r\n-      return [false,null];\r\n-    }\r\n-  }\r\n-\r\n-  Future<Map<String, dynamic>> getUserInfo(String baseUrl, String token) async {\r\n-    try {\r\n-      final response = await _dio.get(\r\n-        \"$baseUrl/webservice/rest/server.php\",\r\n-        queryParameters: {\r\n-          'wstoken': token,\r\n-          'wsfunction': 'core_webservice_get_site_info',\r\n-          'moodlewsrestformat': 'json',\r\n-        },\r\n-      );\r\n-      return response.data;\r\n-    } catch (e) {\r\n-      throw Exception('Failed to get user info: $e');\r\n-    }\r\n-  }\r\n-\r\n-  Future<List<dynamic>> getNotifications(String baseUrl, String token, int userId) async {\r\n-    try {\r\n-      // Try alternative API endpoints\r\n-      final response = await _dio.get(\r\n-        \"$baseUrl/webservice/rest/server.php\",\r\n-        queryParameters: {\r\n-          'wstoken': token,\r\n-          //'wsfunction': 'core_message_get_popup_notifications', // Alternative 1\r\n-           'wsfunction': 'core_message_get_notifications',    // Alternative 2\r\n-          'moodlewsrestformat': 'json',\r\n-          'useridto': userId,\r\n-          'limitnum': 20,  // Add pagination\r\n-        },\r\n-      );\r\n-\r\n-      return response.data['notifications'] ?? [];\r\n-    } catch (e) {\r\n-      print('Error trying alternative notification APIs: $e');\r\n-      return [];\r\n-    }\r\n-  }\r\n-}\r\n-\r\n"
                },
                {
                    "date": 1743059967205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import 'package:dio/dio.dart';\r\n \r\n class ApiService {\r\n   final Dio _dio = Dio();\r\n-  var kDebugMode = true;\r\n+  var kDebugMode = True;\r\n \r\n   ApiService() {\r\n     // Add this interceptor for testing notifications\r\n     if (kDebugMode) { // Only in debug mode\r\n"
                },
                {
                    "date": 1743059974104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import 'package:dio/dio.dart';\r\n \r\n class ApiService {\r\n   final Dio _dio = Dio();\r\n-  var kDebugMode = True;\r\n+  var kDebugMode = true;\r\n \r\n   ApiService() {\r\n     // Add this interceptor for testing notifications\r\n     if (kDebugMode) { // Only in debug mode\r\n"
                },
                {
                    "date": 1743061838162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,8 +84,25 @@\n       throw Exception('Failed to get user info: $e');\r\n     }\r\n   }\r\n \r\n+  Future<List<dynamic>> getCourses(String baseUrl, String token, int userId) async {\r\n+    try {\r\n+      final response = await _dio.get(\r\n+        \"$baseUrl/webservice/rest/server.php\",\r\n+        queryParameters: {\r\n+          'wstoken': token,\r\n+          'wsfunction': 'core_enrol_get_users_courses',\r\n+          'moodlewsrestformat': 'json',\r\n+          'userid': userId,\r\n+        },\r\n+      );\r\n+      return response.data;\r\n+    } catch (e) {\r\n+      throw Exception('Failed to get courses: $e');\r\n+    }\r\n+  }\r\n+\r\n   Future<List<dynamic>> getNotifications(String baseUrl, String token, int userId) async {\r\n     try {\r\n       // Try alternative API endpoints\r\n       final response = await _dio.get(\r\n"
                },
                {
                    "date": 1743062291130,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,8 +101,25 @@\n       throw Exception('Failed to get courses: $e');\r\n     }\r\n   }\r\n \r\n+  Future<List<dynamic>> getCoursesContent(String baseUrl, String token, int courseId) async {\r\n+    try {\r\n+      final response = await _dio.get(\r\n+        \"$baseUrl/webservice/rest/server.php\",\r\n+        queryParameters: {\r\n+          'wstoken': token,\r\n+          'wsfunction': 'core_course_get_contents',\r\n+          'moodlewsrestformat': 'json',\r\n+          'courseid': courseId,\r\n+        },\r\n+      );\r\n+      return response.data;\r\n+    } catch (e) {\r\n+      throw Exception('Failed to get course content: $e');\r\n+    }\r\n+  }\r\n+\r\n   Future<List<dynamic>> getNotifications(String baseUrl, String token, int userId) async {\r\n     try {\r\n       // Try alternative API endpoints\r\n       final response = await _dio.get(\r\n"
                },
                {
                    "date": 1743062464335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,6 +139,23 @@\n       print('Error trying alternative notification APIs: $e');\r\n       return [];\r\n     }\r\n   }\r\n+\r\n+  Future<void> fetchDiscussionData(String baseUrl, String token, int discussionId) async {\r\n+    final String serverUrl = '$baseUrl/webservice/rest/server.php';\r\n+    try {\r\n+      final response = await _dio.get(\r\n+        serverUrl,\r\n+        queryParameters: {\r\n+          'wstoken': token,\r\n+          'wsfunction': 'mod_forum_get_forum_discussion',\r\n+          'moodlewsrestformat': 'json',\r\n+          'discussionid': discussionId,\r\n+        },\r\n+      );\r\n+    } catch (e) {\r\n+      print('Error fetching discussion data: $e');\r\n+    }\r\n+  }\r\n }\r\n \r\n"
                },
                {
                    "date": 1743062620208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,9 +140,9 @@\n       return [];\r\n     }\r\n   }\r\n \r\n-  Future<void> fetchDiscussionData(String baseUrl, String token, int discussionId) async {\r\n+  Future<List<dynamic>> fetchDiscussionData(String baseUrl, String token, int discussionId) async {\r\n     final String serverUrl = '$baseUrl/webservice/rest/server.php';\r\n     try {\r\n       final response = await _dio.get(\r\n         serverUrl,\r\n@@ -152,8 +152,10 @@\n           'moodlewsrestformat': 'json',\r\n           'discussionid': discussionId,\r\n         },\r\n       );\r\n+\r\n+      return response.data;\r\n     } catch (e) {\r\n       print('Error fetching discussion data: $e');\r\n     }\r\n   }\r\n"
                },
                {
                    "date": 1743062651804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,8 +156,9 @@\n \r\n       return response.data;\r\n     } catch (e) {\r\n       print('Error fetching discussion data: $e');\r\n+      return [];\r\n     }\r\n   }\r\n }\r\n \r\n"
                },
                {
                    "date": 1743062674795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,9 +140,9 @@\n       return [];\r\n     }\r\n   }\r\n \r\n-  Future<List<dynamic>> fetchDiscussionData(String baseUrl, String token, int discussionId) async {\r\n+  Future<Map<String, dynamic>?> fetchDiscussionData(String baseUrl, String token, int discussionId) async {\r\n     final String serverUrl = '$baseUrl/webservice/rest/server.php';\r\n     try {\r\n       final response = await _dio.get(\r\n         serverUrl,\r\n@@ -156,9 +156,9 @@\n \r\n       return response.data;\r\n     } catch (e) {\r\n       print('Error fetching discussion data: $e');\r\n-      return [];\r\n+      return {};\r\n     }\r\n   }\r\n }\r\n \r\n"
                },
                {
                    "date": 1743062848864,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,9 +140,9 @@\n       return [];\r\n     }\r\n   }\r\n \r\n-  Future<Map<String, dynamic>?> fetchDiscussionData(String baseUrl, String token, int discussionId) async {\r\n+  Future<Map<String, dynamic>?> getForumDiscussions(String baseUrl, String token, int discussionId) async {\r\n     final String serverUrl = '$baseUrl/webservice/rest/server.php';\r\n     try {\r\n       final response = await _dio.get(\r\n         serverUrl,\r\n"
                },
                {
                    "date": 1743062926938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,164 @@\n+import 'dart:ffi';\r\n+\r\n+import 'package:dio/dio.dart';\r\n+\r\n+class ApiService {\r\n+  final Dio _dio = Dio();\r\n+  var kDebugMode = true;\r\n+\r\n+  ApiService() {\r\n+    // Add this interceptor for testing notifications\r\n+    if (kDebugMode) { // Only in debug mode\r\n+      _dio.interceptors.add(InterceptorsWrapper(\r\n+        onRequest: (options, handler) {\r\n+          // Check if it's a notifications request\r\n+          if (options.queryParameters['wsfunction'] == 'core_message_get_notifications') {\r\n+            // Mock response data\r\n+            final mockNotifications = [\r\n+              {\r\n+                'id': 1,\r\n+                'subject': 'Mock Notification 1',\r\n+                'smallmessage': 'This is a test notification!',\r\n+                'timecreated': DateTime.now().subtract(const Duration(minutes: 5)).millisecondsSinceEpoch ~/ 1000,\r\n+              },\r\n+              {\r\n+                'id': 2,\r\n+                'subject': 'Assignment Due',\r\n+                'smallmessage': 'Your assignment is due tomorrow!',\r\n+                'timecreated': DateTime.now().subtract(const Duration(hours: 2)).millisecondsSinceEpoch ~/ 1000,\r\n+              },\r\n+            ];\r\n+\r\n+            // Simulate a successful response\r\n+            handler.resolve(\r\n+              Response(\r\n+                requestOptions: options,\r\n+                data: {'notifications': mockNotifications},\r\n+              ),\r\n+            );\r\n+            return;\r\n+          }\r\n+          // Continue with the original request for other APIs\r\n+          handler.next(options);\r\n+        },\r\n+      ));\r\n+    }\r\n+  }\r\n+\r\n+  Future<bool> validateMoodleUrl(String url) async {\r\n+    try {\r\n+      final response = await _dio.get(url);\r\n+      return response.statusCode == 200;\r\n+    } catch (e) {\r\n+      return false;\r\n+    }\r\n+  }\r\n+\r\n+  Future<List> login(String baseUrl, String username, String password) async {\r\n+    try {\r\n+      final response = await _dio.get(\r\n+        \"$baseUrl/login/token.php?username=$username&password=$password&service=moodle_mobile_app\",\r\n+      );\r\n+      if (response.statusCode == 200 && response.data[\"token\"] != null) {\r\n+        print(response.data);\r\n+        return [true, response.data[\"token\"]];\r\n+      }\r\n+      return [false,null];\r\n+    } catch (e) {\r\n+      return [false,null];\r\n+    }\r\n+  }\r\n+\r\n+  Future<Map<String, dynamic>> getUserInfo(String baseUrl, String token) async {\r\n+    try {\r\n+      final response = await _dio.get(\r\n+        \"$baseUrl/webservice/rest/server.php\",\r\n+        queryParameters: {\r\n+          'wstoken': token,\r\n+          'wsfunction': 'core_webservice_get_site_info',\r\n+          'moodlewsrestformat': 'json',\r\n+        },\r\n+      );\r\n+      return response.data;\r\n+    } catch (e) {\r\n+      throw Exception('Failed to get user info: $e');\r\n+    }\r\n+  }\r\n+\r\n+  Future<List<dynamic>> getCourses(String baseUrl, String token, int userId) async {\r\n+    try {\r\n+      final response = await _dio.get(\r\n+        \"$baseUrl/webservice/rest/server.php\",\r\n+        queryParameters: {\r\n+          'wstoken': token,\r\n+          'wsfunction': 'core_enrol_get_users_courses',\r\n+          'moodlewsrestformat': 'json',\r\n+          'userid': userId,\r\n+        },\r\n+      );\r\n+      return response.data;\r\n+    } catch (e) {\r\n+      throw Exception('Failed to get courses: $e');\r\n+    }\r\n+  }\r\n+\r\n+  Future<List<dynamic>> getCoursesContent(String baseUrl, String token, int courseId) async {\r\n+    try {\r\n+      final response = await _dio.get(\r\n+        \"$baseUrl/webservice/rest/server.php\",\r\n+        queryParameters: {\r\n+          'wstoken': token,\r\n+          'wsfunction': 'core_course_get_contents',\r\n+          'moodlewsrestformat': 'json',\r\n+          'courseid': courseId,\r\n+        },\r\n+      );\r\n+      return response.data;\r\n+    } catch (e) {\r\n+      throw Exception('Failed to get course content: $e');\r\n+    }\r\n+  }\r\n+\r\n+  Future<List<dynamic>> getNotifications(String baseUrl, String token, int userId) async {\r\n+    try {\r\n+      // Try alternative API endpoints\r\n+      final response = await _dio.get(\r\n+        \"$baseUrl/webservice/rest/server.php\",\r\n+        queryParameters: {\r\n+          'wstoken': token,\r\n+          //'wsfunction': 'core_message_get_popup_notifications', // Alternative 1\r\n+          'wsfunction': 'core_message_get_notifications',    // Alternative 2\r\n+          'moodlewsrestformat': 'json',\r\n+          'useridto': userId,\r\n+          'limitnum': 20,  // Add pagination\r\n+        },\r\n+      );\r\n+\r\n+      return response.data['notifications'] ?? [];\r\n+    } catch (e) {\r\n+      print('Error trying alternative notification APIs: $e');\r\n+      return [];\r\n+    }\r\n+  }\r\n+\r\n+  Future<Map<String, dynamic>> getForumDiscussions(String baseUrl, String token, int discussionId) async {\r\n+    final String serverUrl = '$baseUrl/webservice/rest/server.php';\r\n+    try {\r\n+      final response = await _dio.get(\r\n+        serverUrl,\r\n+        queryParameters: {\r\n+          'wstoken': token,\r\n+          'wsfunction': 'mod_forum_get_forum_discussion',\r\n+          'moodlewsrestformat': 'json',\r\n+          'discussionid': discussionId,\r\n+        },\r\n+      );\r\n+\r\n+      return response.data;\r\n+    } catch (e) {\r\n+      print('Error fetching discussion data: $e');\r\n+      return {};\r\n+    }\r\n+  }\r\n+}\r\n+\r\n"
                },
                {
                    "date": 1743063754230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -159,170 +159,30 @@\n       print('Error fetching discussion data: $e');\r\n       return {};\r\n     }\r\n   }\r\n-}\r\n \r\n-import 'dart:ffi';\r\n-\r\n-import 'package:dio/dio.dart';\r\n-\r\n-class ApiService {\r\n-  final Dio _dio = Dio();\r\n-  var kDebugMode = true;\r\n-\r\n-  ApiService() {\r\n-    // Add this interceptor for testing notifications\r\n-    if (kDebugMode) { // Only in debug mode\r\n-      _dio.interceptors.add(InterceptorsWrapper(\r\n-        onRequest: (options, handler) {\r\n-          // Check if it's a notifications request\r\n-          if (options.queryParameters['wsfunction'] == 'core_message_get_notifications') {\r\n-            // Mock response data\r\n-            final mockNotifications = [\r\n-              {\r\n-                'id': 1,\r\n-                'subject': 'Mock Notification 1',\r\n-                'smallmessage': 'This is a test notification!',\r\n-                'timecreated': DateTime.now().subtract(const Duration(minutes: 5)).millisecondsSinceEpoch ~/ 1000,\r\n-              },\r\n-              {\r\n-                'id': 2,\r\n-                'subject': 'Assignment Due',\r\n-                'smallmessage': 'Your assignment is due tomorrow!',\r\n-                'timecreated': DateTime.now().subtract(const Duration(hours: 2)).millisecondsSinceEpoch ~/ 1000,\r\n-              },\r\n-            ];\r\n-\r\n-            // Simulate a successful response\r\n-            handler.resolve(\r\n-              Response(\r\n-                requestOptions: options,\r\n-                data: {'notifications': mockNotifications},\r\n-              ),\r\n-            );\r\n-            return;\r\n-          }\r\n-          // Continue with the original request for other APIs\r\n-          handler.next(options);\r\n-        },\r\n-      ));\r\n-    }\r\n-  }\r\n-\r\n-  Future<bool> validateMoodleUrl(String url) async {\r\n-    try {\r\n-      final response = await _dio.get(url);\r\n-      return response.statusCode == 200;\r\n-    } catch (e) {\r\n-      return false;\r\n-    }\r\n-  }\r\n-\r\n-  Future<List> login(String baseUrl, String username, String password) async {\r\n-    try {\r\n-      final response = await _dio.get(\r\n-        \"$baseUrl/login/token.php?username=$username&password=$password&service=moodle_mobile_app\",\r\n-      );\r\n-      if (response.statusCode == 200 && response.data[\"token\"] != null) {\r\n-        print(response.data);\r\n-        return [true, response.data[\"token\"]];\r\n-      }\r\n-      return [false,null];\r\n-    } catch (e) {\r\n-      return [false,null];\r\n-    }\r\n-  }\r\n-\r\n-  Future<Map<String, dynamic>> getUserInfo(String baseUrl, String token) async {\r\n-    try {\r\n-      final response = await _dio.get(\r\n-        \"$baseUrl/webservice/rest/server.php\",\r\n-        queryParameters: {\r\n-          'wstoken': token,\r\n-          'wsfunction': 'core_webservice_get_site_info',\r\n-          'moodlewsrestformat': 'json',\r\n-        },\r\n-      );\r\n-      return response.data;\r\n-    } catch (e) {\r\n-      throw Exception('Failed to get user info: $e');\r\n-    }\r\n-  }\r\n-\r\n-  Future<List<dynamic>> getCourses(String baseUrl, String token, int userId) async {\r\n-    try {\r\n-      final response = await _dio.get(\r\n-        \"$baseUrl/webservice/rest/server.php\",\r\n-        queryParameters: {\r\n-          'wstoken': token,\r\n-          'wsfunction': 'core_enrol_get_users_courses',\r\n-          'moodlewsrestformat': 'json',\r\n-          'userid': userId,\r\n-        },\r\n-      );\r\n-      return response.data;\r\n-    } catch (e) {\r\n-      throw Exception('Failed to get courses: $e');\r\n-    }\r\n-  }\r\n-\r\n-  Future<List<dynamic>> getCoursesContent(String baseUrl, String token, int courseId) async {\r\n-    try {\r\n-      final response = await _dio.get(\r\n-        \"$baseUrl/webservice/rest/server.php\",\r\n-        queryParameters: {\r\n-          'wstoken': token,\r\n-          'wsfunction': 'core_course_get_contents',\r\n-          'moodlewsrestformat': 'json',\r\n-          'courseid': courseId,\r\n-        },\r\n-      );\r\n-      return response.data;\r\n-    } catch (e) {\r\n-      throw Exception('Failed to get course content: $e');\r\n-    }\r\n-  }\r\n-\r\n-  Future<List<dynamic>> getNotifications(String baseUrl, String token, int userId) async {\r\n-    try {\r\n-      // Try alternative API endpoints\r\n-      final response = await _dio.get(\r\n-        \"$baseUrl/webservice/rest/server.php\",\r\n-        queryParameters: {\r\n-          'wstoken': token,\r\n-          //'wsfunction': 'core_message_get_popup_notifications', // Alternative 1\r\n-          'wsfunction': 'core_message_get_notifications',    // Alternative 2\r\n-          'moodlewsrestformat': 'json',\r\n-          'useridto': userId,\r\n-          'limitnum': 20,  // Add pagination\r\n-        },\r\n-      );\r\n-\r\n-      return response.data['notifications'] ?? [];\r\n-    } catch (e) {\r\n-      print('Error trying alternative notification APIs: $e');\r\n-      return [];\r\n-    }\r\n-  }\r\n-\r\n-  Future<Map<String, dynamic>?> getForumDiscussions(String baseUrl, String token, int discussionId) async {\r\n+  Future<void> getForumDiscussionsForum(String baseUrl, String token, int forumId) async {\r\n     final String serverUrl = '$baseUrl/webservice/rest/server.php';\r\n     try {\r\n       final response = await _dio.get(\r\n         serverUrl,\r\n         queryParameters: {\r\n           'wstoken': token,\r\n-          'wsfunction': 'mod_forum_get_forum_discussion',\r\n+          'wsfunction': 'mod_forum_get_forum_discussions',\r\n           'moodlewsrestformat': 'json',\r\n-          'discussionid': discussionId,\r\n+          'forumid': forumId,\r\n         },\r\n       );\r\n-\r\n-      return response.data;\r\n+      setState(() {\r\n+        _discussions = response.data['discussions'] ?? [];\r\n+        _isLoading = false;\r\n+      });\r\n     } catch (e) {\r\n-      print('Error fetching discussion data: $e');\r\n-      return {};\r\n+      print('Error fetching discussions: $e');\r\n+      setState(() {\r\n+        _isLoading = false;\r\n+      });\r\n     }\r\n   }\r\n }\r\n \r\n"
                },
                {
                    "date": 1743063782378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,12 +172,10 @@\n           'moodlewsrestformat': 'json',\r\n           'forumid': forumId,\r\n         },\r\n       );\r\n-      setState(() {\r\n-        _discussions = response.data['discussions'] ?? [];\r\n-        _isLoading = false;\r\n-      });\r\n+     \r\n+      return response.data['discussions'];\r\n     } catch (e) {\r\n       print('Error fetching discussions: $e');\r\n       setState(() {\r\n         _isLoading = false;\r\n"
                },
                {
                    "date": 1743063804373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,184 @@\n+import 'dart:ffi';\r\n+\r\n+import 'package:dio/dio.dart';\r\n+\r\n+class ApiService {\r\n+  final Dio _dio = Dio();\r\n+  var kDebugMode = true;\r\n+\r\n+  ApiService() {\r\n+    // Add this interceptor for testing notifications\r\n+    if (kDebugMode) { // Only in debug mode\r\n+      _dio.interceptors.add(InterceptorsWrapper(\r\n+        onRequest: (options, handler) {\r\n+          // Check if it's a notifications request\r\n+          if (options.queryParameters['wsfunction'] == 'core_message_get_notifications') {\r\n+            // Mock response data\r\n+            final mockNotifications = [\r\n+              {\r\n+                'id': 1,\r\n+                'subject': 'Mock Notification 1',\r\n+                'smallmessage': 'This is a test notification!',\r\n+                'timecreated': DateTime.now().subtract(const Duration(minutes: 5)).millisecondsSinceEpoch ~/ 1000,\r\n+              },\r\n+              {\r\n+                'id': 2,\r\n+                'subject': 'Assignment Due',\r\n+                'smallmessage': 'Your assignment is due tomorrow!',\r\n+                'timecreated': DateTime.now().subtract(const Duration(hours: 2)).millisecondsSinceEpoch ~/ 1000,\r\n+              },\r\n+            ];\r\n+\r\n+            // Simulate a successful response\r\n+            handler.resolve(\r\n+              Response(\r\n+                requestOptions: options,\r\n+                data: {'notifications': mockNotifications},\r\n+              ),\r\n+            );\r\n+            return;\r\n+          }\r\n+          // Continue with the original request for other APIs\r\n+          handler.next(options);\r\n+        },\r\n+      ));\r\n+    }\r\n+  }\r\n+\r\n+  Future<bool> validateMoodleUrl(String url) async {\r\n+    try {\r\n+      final response = await _dio.get(url);\r\n+      return response.statusCode == 200;\r\n+    } catch (e) {\r\n+      return false;\r\n+    }\r\n+  }\r\n+\r\n+  Future<List> login(String baseUrl, String username, String password) async {\r\n+    try {\r\n+      final response = await _dio.get(\r\n+        \"$baseUrl/login/token.php?username=$username&password=$password&service=moodle_mobile_app\",\r\n+      );\r\n+      if (response.statusCode == 200 && response.data[\"token\"] != null) {\r\n+        print(response.data);\r\n+        return [true, response.data[\"token\"]];\r\n+      }\r\n+      return [false,null];\r\n+    } catch (e) {\r\n+      return [false,null];\r\n+    }\r\n+  }\r\n+\r\n+  Future<Map<String, dynamic>> getUserInfo(String baseUrl, String token) async {\r\n+    try {\r\n+      final response = await _dio.get(\r\n+        \"$baseUrl/webservice/rest/server.php\",\r\n+        queryParameters: {\r\n+          'wstoken': token,\r\n+          'wsfunction': 'core_webservice_get_site_info',\r\n+          'moodlewsrestformat': 'json',\r\n+        },\r\n+      );\r\n+      return response.data;\r\n+    } catch (e) {\r\n+      throw Exception('Failed to get user info: $e');\r\n+    }\r\n+  }\r\n+\r\n+  Future<List<dynamic>> getCourses(String baseUrl, String token, int userId) async {\r\n+    try {\r\n+      final response = await _dio.get(\r\n+        \"$baseUrl/webservice/rest/server.php\",\r\n+        queryParameters: {\r\n+          'wstoken': token,\r\n+          'wsfunction': 'core_enrol_get_users_courses',\r\n+          'moodlewsrestformat': 'json',\r\n+          'userid': userId,\r\n+        },\r\n+      );\r\n+      return response.data;\r\n+    } catch (e) {\r\n+      throw Exception('Failed to get courses: $e');\r\n+    }\r\n+  }\r\n+\r\n+  Future<List<dynamic>> getCoursesContent(String baseUrl, String token, int courseId) async {\r\n+    try {\r\n+      final response = await _dio.get(\r\n+        \"$baseUrl/webservice/rest/server.php\",\r\n+        queryParameters: {\r\n+          'wstoken': token,\r\n+          'wsfunction': 'core_course_get_contents',\r\n+          'moodlewsrestformat': 'json',\r\n+          'courseid': courseId,\r\n+        },\r\n+      );\r\n+      return response.data;\r\n+    } catch (e) {\r\n+      throw Exception('Failed to get course content: $e');\r\n+    }\r\n+  }\r\n+\r\n+  Future<List<dynamic>> getNotifications(String baseUrl, String token, int userId) async {\r\n+    try {\r\n+      // Try alternative API endpoints\r\n+      final response = await _dio.get(\r\n+        \"$baseUrl/webservice/rest/server.php\",\r\n+        queryParameters: {\r\n+          'wstoken': token,\r\n+          //'wsfunction': 'core_message_get_popup_notifications', // Alternative 1\r\n+          'wsfunction': 'core_message_get_notifications',    // Alternative 2\r\n+          'moodlewsrestformat': 'json',\r\n+          'useridto': userId,\r\n+          'limitnum': 20,  // Add pagination\r\n+        },\r\n+      );\r\n+\r\n+      return response.data['notifications'] ?? [];\r\n+    } catch (e) {\r\n+      print('Error trying alternative notification APIs: $e');\r\n+      return [];\r\n+    }\r\n+  }\r\n+\r\n+  Future<Map<String, dynamic>> getForumDiscussions(String baseUrl, String token, int discussionId) async {\r\n+    final String serverUrl = '$baseUrl/webservice/rest/server.php';\r\n+    try {\r\n+      final response = await _dio.get(\r\n+        serverUrl,\r\n+        queryParameters: {\r\n+          'wstoken': token,\r\n+          'wsfunction': 'mod_forum_get_forum_discussion',\r\n+          'moodlewsrestformat': 'json',\r\n+          'discussionid': discussionId,\r\n+        },\r\n+      );\r\n+\r\n+      return response.data;\r\n+    } catch (e) {\r\n+      print('Error fetching discussion data: $e');\r\n+      return {};\r\n+    }\r\n+  }\r\n+\r\n+  Future<List> getForumDiscussionsForum(String baseUrl, String token, int forumId) async {\r\n+    final String serverUrl = '$baseUrl/webservice/rest/server.php';\r\n+    try {\r\n+      final response = await _dio.get(\r\n+        serverUrl,\r\n+        queryParameters: {\r\n+          'wstoken': token,\r\n+          'wsfunction': 'mod_forum_get_forum_discussions',\r\n+          'moodlewsrestformat': 'json',\r\n+          'forumid': forumId,\r\n+        },\r\n+      );\r\n+     \r\n+      return response.data['discussions'];\r\n+    } catch (e) {\r\n+      print('Error fetching discussions: $e');\r\n+      return [];\r\n+    }\r\n+  }\r\n+}\r\n+\r\n"
                },
                {
                    "date": 1743063914315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,9 +140,9 @@\n       return [];\r\n     }\r\n   }\r\n \r\n-  Future<Map<String, dynamic>> getForumDiscussions(String baseUrl, String token, int discussionId) async {\r\n+  Future<Map<String, dynamic>> getDiscussions(String baseUrl, String token, int discussionId) async {\r\n     final String serverUrl = '$baseUrl/webservice/rest/server.php';\r\n     try {\r\n       final response = await _dio.get(\r\n         serverUrl,\r\n@@ -181,190 +181,4 @@\n     }\r\n   }\r\n }\r\n \r\n-import 'dart:ffi';\r\n-\r\n-import 'package:dio/dio.dart';\r\n-\r\n-class ApiService {\r\n-  final Dio _dio = Dio();\r\n-  var kDebugMode = true;\r\n-\r\n-  ApiService() {\r\n-    // Add this interceptor for testing notifications\r\n-    if (kDebugMode) { // Only in debug mode\r\n-      _dio.interceptors.add(InterceptorsWrapper(\r\n-        onRequest: (options, handler) {\r\n-          // Check if it's a notifications request\r\n-          if (options.queryParameters['wsfunction'] == 'core_message_get_notifications') {\r\n-            // Mock response data\r\n-            final mockNotifications = [\r\n-              {\r\n-                'id': 1,\r\n-                'subject': 'Mock Notification 1',\r\n-                'smallmessage': 'This is a test notification!',\r\n-                'timecreated': DateTime.now().subtract(const Duration(minutes: 5)).millisecondsSinceEpoch ~/ 1000,\r\n-              },\r\n-              {\r\n-                'id': 2,\r\n-                'subject': 'Assignment Due',\r\n-                'smallmessage': 'Your assignment is due tomorrow!',\r\n-                'timecreated': DateTime.now().subtract(const Duration(hours: 2)).millisecondsSinceEpoch ~/ 1000,\r\n-              },\r\n-            ];\r\n-\r\n-            // Simulate a successful response\r\n-            handler.resolve(\r\n-              Response(\r\n-                requestOptions: options,\r\n-                data: {'notifications': mockNotifications},\r\n-              ),\r\n-            );\r\n-            return;\r\n-          }\r\n-          // Continue with the original request for other APIs\r\n-          handler.next(options);\r\n-        },\r\n-      ));\r\n-    }\r\n-  }\r\n-\r\n-  Future<bool> validateMoodleUrl(String url) async {\r\n-    try {\r\n-      final response = await _dio.get(url);\r\n-      return response.statusCode == 200;\r\n-    } catch (e) {\r\n-      return false;\r\n-    }\r\n-  }\r\n-\r\n-  Future<List> login(String baseUrl, String username, String password) async {\r\n-    try {\r\n-      final response = await _dio.get(\r\n-        \"$baseUrl/login/token.php?username=$username&password=$password&service=moodle_mobile_app\",\r\n-      );\r\n-      if (response.statusCode == 200 && response.data[\"token\"] != null) {\r\n-        print(response.data);\r\n-        return [true, response.data[\"token\"]];\r\n-      }\r\n-      return [false,null];\r\n-    } catch (e) {\r\n-      return [false,null];\r\n-    }\r\n-  }\r\n-\r\n-  Future<Map<String, dynamic>> getUserInfo(String baseUrl, String token) async {\r\n-    try {\r\n-      final response = await _dio.get(\r\n-        \"$baseUrl/webservice/rest/server.php\",\r\n-        queryParameters: {\r\n-          'wstoken': token,\r\n-          'wsfunction': 'core_webservice_get_site_info',\r\n-          'moodlewsrestformat': 'json',\r\n-        },\r\n-      );\r\n-      return response.data;\r\n-    } catch (e) {\r\n-      throw Exception('Failed to get user info: $e');\r\n-    }\r\n-  }\r\n-\r\n-  Future<List<dynamic>> getCourses(String baseUrl, String token, int userId) async {\r\n-    try {\r\n-      final response = await _dio.get(\r\n-        \"$baseUrl/webservice/rest/server.php\",\r\n-        queryParameters: {\r\n-          'wstoken': token,\r\n-          'wsfunction': 'core_enrol_get_users_courses',\r\n-          'moodlewsrestformat': 'json',\r\n-          'userid': userId,\r\n-        },\r\n-      );\r\n-      return response.data;\r\n-    } catch (e) {\r\n-      throw Exception('Failed to get courses: $e');\r\n-    }\r\n-  }\r\n-\r\n-  Future<List<dynamic>> getCoursesContent(String baseUrl, String token, int courseId) async {\r\n-    try {\r\n-      final response = await _dio.get(\r\n-        \"$baseUrl/webservice/rest/server.php\",\r\n-        queryParameters: {\r\n-          'wstoken': token,\r\n-          'wsfunction': 'core_course_get_contents',\r\n-          'moodlewsrestformat': 'json',\r\n-          'courseid': courseId,\r\n-        },\r\n-      );\r\n-      return response.data;\r\n-    } catch (e) {\r\n-      throw Exception('Failed to get course content: $e');\r\n-    }\r\n-  }\r\n-\r\n-  Future<List<dynamic>> getNotifications(String baseUrl, String token, int userId) async {\r\n-    try {\r\n-      // Try alternative API endpoints\r\n-      final response = await _dio.get(\r\n-        \"$baseUrl/webservice/rest/server.php\",\r\n-        queryParameters: {\r\n-          'wstoken': token,\r\n-          //'wsfunction': 'core_message_get_popup_notifications', // Alternative 1\r\n-          'wsfunction': 'core_message_get_notifications',    // Alternative 2\r\n-          'moodlewsrestformat': 'json',\r\n-          'useridto': userId,\r\n-          'limitnum': 20,  // Add pagination\r\n-        },\r\n-      );\r\n-\r\n-      return response.data['notifications'] ?? [];\r\n-    } catch (e) {\r\n-      print('Error trying alternative notification APIs: $e');\r\n-      return [];\r\n-    }\r\n-  }\r\n-\r\n-  Future<Map<String, dynamic>> getForumDiscussions(String baseUrl, String token, int discussionId) async {\r\n-    final String serverUrl = '$baseUrl/webservice/rest/server.php';\r\n-    try {\r\n-      final response = await _dio.get(\r\n-        serverUrl,\r\n-        queryParameters: {\r\n-          'wstoken': token,\r\n-          'wsfunction': 'mod_forum_get_forum_discussion',\r\n-          'moodlewsrestformat': 'json',\r\n-          'discussionid': discussionId,\r\n-        },\r\n-      );\r\n-\r\n-      return response.data;\r\n-    } catch (e) {\r\n-      print('Error fetching discussion data: $e');\r\n-      return {};\r\n-    }\r\n-  }\r\n-\r\n-  Future<void> getForumDiscussionsForum(String baseUrl, String token, int forumId) async {\r\n-    final String serverUrl = '$baseUrl/webservice/rest/server.php';\r\n-    try {\r\n-      final response = await _dio.get(\r\n-        serverUrl,\r\n-        queryParameters: {\r\n-          'wstoken': token,\r\n-          'wsfunction': 'mod_forum_get_forum_discussions',\r\n-          'moodlewsrestformat': 'json',\r\n-          'forumid': forumId,\r\n-        },\r\n-      );\r\n-     \r\n-      return response.data['discussions'];\r\n-    } catch (e) {\r\n-      print('Error fetching discussions: $e');\r\n-      setState(() {\r\n-        _isLoading = false;\r\n-      });\r\n-    }\r\n-  }\r\n-}\r\n-\r\n"
                },
                {
                    "date": 1744385227423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,49 +1,92 @@\n-import 'dart:ffi';\r\n-\r\n import 'package:dio/dio.dart';\r\n+import 'dart:developer' as developer; // Use aliased developer log\r\n \r\n class ApiService {\r\n   final Dio _dio = Dio();\r\n-  var kDebugMode = true;\r\n+  // Let's assume we want mocking only in debug mode\r\n+  // You can set this based on your build environment if needed\r\n+  static const bool kDebugMode = true; // Or use Foundation's kDebugMode\r\n \r\n   ApiService() {\r\n-    // Add this interceptor for testing notifications\r\n-    if (kDebugMode) { // Only in debug mode\r\n+    // Add logging interceptor to see request/response details easily\r\n+    _dio.interceptors.add(LogInterceptor(\r\n+      requestBody: true,\r\n+      responseBody: true,\r\n+      logPrint: (o) => developer.log(o.toString(), name: 'ApiServiceDio'),\r\n+    ));\r\n+\r\n+    // --- Mock Interceptor (Optional - Use carefully for debugging) ---\r\n+    // Let's comment this out for now to test the REAL API first.\r\n+    // If you need mocking later, make sure the wsfunction matches the one in getNotifications.\r\n+    /*\r\n+    if (kDebugMode) {\r\n       _dio.interceptors.add(InterceptorsWrapper(\r\n         onRequest: (options, handler) {\r\n-          // Check if it's a notifications request\r\n-          if (options.queryParameters['wsfunction'] == 'core_message_get_notifications') {\r\n+          // Check if it's the specific notifications request we want to mock\r\n+          if (options.queryParameters['wsfunction'] == 'message_popup_get_popup_notifications') { // <-- Match the function used below\r\n+            developer.log('--- Using Mock Notifications ---', name: 'ApiServiceMock');\r\n             // Mock response data\r\n-            final mockNotifications = [\r\n-              {\r\n-                'id': 1,\r\n-                'subject': 'Mock Notification 1',\r\n-                'smallmessage': 'This is a test notification!',\r\n-                'timecreated': DateTime.now().subtract(const Duration(minutes: 5)).millisecondsSinceEpoch ~/ 1000,\r\n-              },\r\n-              {\r\n-                'id': 2,\r\n-                'subject': 'Assignment Due',\r\n-                'smallmessage': 'Your assignment is due tomorrow!',\r\n-                'timecreated': DateTime.now().subtract(const Duration(hours: 2)).millisecondsSinceEpoch ~/ 1000,\r\n-              },\r\n-            ];\r\n+            final mockNotifications = { // The API likely returns a map\r\n+              'notifications': [\r\n+                {\r\n+                  'id': 1,\r\n+                  'useridfrom': 2, // Example field\r\n+                  'useridto': 32596, // Example field matching your user ID\r\n+                  'subject': 'Mock Notification 1 (Unread)',\r\n+                  'smallmessage': 'This is a test UNREAD notification!',\r\n+                  'fullmessage': 'This is the full message for the unread notification.',\r\n+                  'fullmessageformat': 1, // HTML format usually\r\n+                  'contexturl': 'https://aybuzem.aybu.edu.tr/course/view.php?id=123',\r\n+                  'contexturlname': 'Sample Course',\r\n+                  'timecreated': DateTime.now().subtract(const Duration(minutes: 5)).millisecondsSinceEpoch ~/ 1000,\r\n+                  'timeread': null, // Key indicator for unread\r\n+                  'component': 'moodle', // Example\r\n+                  'eventtype': 'assign_due', // Example\r\n+                  'customdata': null // Example\r\n+                },\r\n+                {\r\n+                  'id': 2,\r\n+                  'useridfrom': 3,\r\n+                  'useridto': 32596,\r\n+                  'subject': 'Mock Notification 2 (Read)',\r\n+                  'smallmessage': 'Assignment due tomorrow (already read).',\r\n+                  'fullmessage': 'Full details about the assignment due tomorrow.',\r\n+                  'fullmessageformat': 1,\r\n+                  'contexturl': 'https://aybuzem.aybu.edu.tr/mod/assign/view.php?id=456',\r\n+                  'contexturlname': 'Assignment 1',\r\n+                  'timecreated': DateTime.now().subtract(const Duration(hours: 2)).millisecondsSinceEpoch ~/ 1000,\r\n+                  'timeread': DateTime.now().subtract(const Duration(hours: 1)).millisecondsSinceEpoch ~/ 1000, // Non-null indicates read\r\n+                  'component': 'mod_assign',\r\n+                  'eventtype': 'due_soon',\r\n+                  'customdata': '{\"assignmentid\": 456}' // Example\r\n+                },\r\n+              ],\r\n+              'unreadcount': 1 // The API often includes this\r\n+            };\r\n \r\n             // Simulate a successful response\r\n             handler.resolve(\r\n               Response(\r\n                 requestOptions: options,\r\n-                data: {'notifications': mockNotifications},\r\n+                data: mockNotifications, // Return the full map\r\n+                statusCode: 200,\r\n               ),\r\n             );\r\n-            return;\r\n+            return; // Stop processing, return mock\r\n           }\r\n           // Continue with the original request for other APIs\r\n+          developer.log('Passing request through: ${options.uri}', name: 'ApiServiceMock');\r\n           handler.next(options);\r\n         },\r\n+        onError: (e, handler) {\r\n+          developer.log('Mock Interceptor Error: ${e.message}', name: 'ApiServiceMock', error: e);\r\n+          handler.next(e); // Pass errors through\r\n+        }\r\n       ));\r\n     }\r\n+    */\r\n+     // --- End Mock Interceptor ---\r\n   }\r\n \r\n   Future<bool> validateMoodleUrl(String url) async {\r\n     try {\r\n"
                },
                {
                    "date": 1744385273865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,10 @@\n       return [false,null];\r\n     }\r\n   }\r\n \r\n-  Future<Map<String, dynamic>> getUserInfo(String baseUrl, String token) async {\r\n+   Future<Map<String, dynamic>> getUserInfo(String baseUrl, String token) async {\r\n+    // No changes needed here, but ensure it works correctly\r\n     try {\r\n       final response = await _dio.get(\r\n         \"$baseUrl/webservice/rest/server.php\",\r\n         queryParameters: {\r\n@@ -121,67 +122,159 @@\n           'wsfunction': 'core_webservice_get_site_info',\r\n           'moodlewsrestformat': 'json',\r\n         },\r\n       );\r\n-      return response.data;\r\n+       if (response.statusCode == 200 && response.data is Map<String, dynamic>) {\r\n+         return response.data;\r\n+       } else {\r\n+         throw Exception('Failed to get user info: Invalid response format or status code ${response.statusCode}');\r\n+       }\r\n     } catch (e) {\r\n+      developer.log('Failed to get user info', name: 'ApiService', error: e);\r\n+      // Re-throw a more specific exception or handle it as needed\r\n       throw Exception('Failed to get user info: $e');\r\n     }\r\n   }\r\n \r\n   Future<List<dynamic>> getCourses(String baseUrl, String token, int userId) async {\r\n+     // No changes needed here, but ensure it works correctly\r\n+     try {\r\n+        final response = await _dio.get(\r\n+          \"$baseUrl/webservice/rest/server.php\",\r\n+          queryParameters: {\r\n+            'wstoken': token,\r\n+            'wsfunction': 'core_enrol_get_users_courses',\r\n+            'moodlewsrestformat': 'json',\r\n+            'userid': userId,\r\n+          },\r\n+        );\r\n+        if (response.statusCode == 200 && response.data is List) {\r\n+            return response.data;\r\n+        } else {\r\n+             throw Exception('Failed to get courses: Invalid response format or status code ${response.statusCode}');\r\n+        }\r\n+      } catch (e) {\r\n+        developer.log('Failed to get courses', name: 'ApiService', error: e);\r\n+        throw Exception('Failed to get courses: $e');\r\n+      }\r\n+  }\r\n+\r\n+  Future<List<dynamic>> getCoursesContent(String baseUrl, String token, int courseId) async {\r\n+    // No changes needed here, but ensure it works correctly\r\n     try {\r\n-      final response = await _dio.get(\r\n-        \"$baseUrl/webservice/rest/server.php\",\r\n-        queryParameters: {\r\n-          'wstoken': token,\r\n-          'wsfunction': 'core_enrol_get_users_courses',\r\n-          'moodlewsrestformat': 'json',\r\n-          'userid': userId,\r\n-        },\r\n-      );\r\n-      return response.data;\r\n+        final response = await _dio.get(\r\n+          \"$baseUrl/webservice/rest/server.php\",\r\n+          queryParameters: {\r\n+            'wstoken': token,\r\n+            'wsfunction': 'core_course_get_contents',\r\n+            'moodlewsrestformat': 'json',\r\n+            'courseid': courseId,\r\n+          },\r\n+        );\r\n+         if (response.statusCode == 200 && response.data is List) {\r\n+            return response.data;\r\n+        } else {\r\n+            // Moodle might return an error object instead of a list\r\n+             if (response.data is Map && response.data.containsKey('exception')) {\r\n+                 developer.log('API Error getting content for course $courseId: ${response.data}', name: 'ApiService');\r\n+                 // Return an empty list or throw a specific error\r\n+                 return []; // Or throw Exception('API Error: ${response.data['message']}');\r\n+             }\r\n+             throw Exception('Failed to get course content for $courseId: Invalid response format or status code ${response.statusCode}');\r\n+        }\r\n     } catch (e) {\r\n-      throw Exception('Failed to get courses: $e');\r\n+        developer.log('Failed to get course content for $courseId', name: 'ApiService', error: e);\r\n+        throw Exception('Failed to get course content for $courseId: $e');\r\n     }\r\n   }\r\n \r\n-  Future<List<dynamic>> getCoursesContent(String baseUrl, String token, int courseId) async {\r\n+\r\n+  /// Fetches notifications for the user.\r\n+  /// Returns the raw response data map which likely contains 'notifications' list and 'unreadcount'.\r\n+  Future<Map<String, dynamic>> getNotifications(String baseUrl, String token, int userId) async {\r\n+    developer.log('Fetching notifications with userId: $userId', name: 'ApiService');\r\n     try {\r\n       final response = await _dio.get(\r\n         \"$baseUrl/webservice/rest/server.php\",\r\n         queryParameters: {\r\n           'wstoken': token,\r\n-          'wsfunction': 'core_course_get_contents',\r\n+          // Use the function available in your API list and commonly used by the app\r\n+          'wsfunction': 'message_popup_get_popup_notifications',\r\n           'moodlewsrestformat': 'json',\r\n-          'courseid': courseId,\r\n+          'useridto': userId, // This parameter is correct for this function\r\n+          'limitnum': 50,  // Fetch more notifications\r\n+          'newestfirst': 1, // Usually want newest first\r\n+          // 'read': 0, // You could use this to fetch only unread (0) or read (1)\r\n         },\r\n       );\r\n-      return response.data;\r\n-    } catch (e) {\r\n-      throw Exception('Failed to get course content: $e');\r\n+\r\n+      // The response itself is usually a Map, containing the list\r\n+      if (response.statusCode == 200 && response.data is Map<String, dynamic>) {\r\n+        developer.log('Successfully fetched notifications data.', name: 'ApiService');\r\n+        return response.data;\r\n+      } else {\r\n+         developer.log('Failed to get notifications: Status code ${response.statusCode}, Data type: ${response.data.runtimeType}', name: 'ApiService');\r\n+         // Check for Moodle specific error structure\r\n+         if (response.data is Map && response.data.containsKey('exception')) {\r\n+            throw Exception('API Error: ${response.data['message']} (${response.data['errorcode']})');\r\n+         }\r\n+         throw Exception('Failed to get notifications: Invalid response format or status code ${response.statusCode}');\r\n+      }\r\n+\r\n+    } on DioException catch (e) {\r\n+        developer.log('DioError fetching notifications: ${e.message}', name: 'ApiService', error: e, stackTrace: e.stackTrace);\r\n+        developer.log('DioError Response: ${e.response?.data}', name: 'ApiService');\r\n+        // Provide a more informative error message\r\n+        String errorMsg = 'Network error fetching notifications.';\r\n+        if (e.response?.data is Map && e.response!.data.containsKey('message')) {\r\n+          errorMsg = 'API Error: ${e.response!.data['message']}';\r\n+        } else if (e.message != null) {\r\n+          errorMsg = 'Network error: ${e.message}';\r\n+        }\r\n+        throw Exception(errorMsg);\r\n+    } catch (e, s) {\r\n+      developer.log('Error fetching notifications: $e', name: 'ApiService', error: e, stackTrace: s);\r\n+      // Return an empty map or throw, depending on how you want to handle errors upstream\r\n+      // Throwing is generally better to indicate failure clearly\r\n+      throw Exception('An unexpected error occurred while fetching notifications.');\r\n     }\r\n   }\r\n \r\n-  Future<List<dynamic>> getNotifications(String baseUrl, String token, int userId) async {\r\n+   // --- Add function to mark notification as read ---\r\n+  Future<bool> markNotificationRead(String baseUrl, String token, int notificationId) async {\r\n+    developer.log('Marking notification $notificationId as read', name: 'ApiService');\r\n     try {\r\n-      // Try alternative API endpoints\r\n-      final response = await _dio.get(\r\n+      final response = await _dio.post( // Use POST as we are changing state\r\n         \"$baseUrl/webservice/rest/server.php\",\r\n-        queryParameters: {\r\n+        queryParameters: { // Common parameters go in query\r\n           'wstoken': token,\r\n-          //'wsfunction': 'core_message_get_popup_notifications', // Alternative 1\r\n-          'wsfunction': 'core_message_get_notifications',    // Alternative 2\r\n+          'wsfunction': 'core_message_mark_notification_read',\r\n           'moodlewsrestformat': 'json',\r\n-          'useridto': userId,\r\n-          'limitnum': 20,  // Add pagination\r\n         },\r\n+        data: { // Specific parameters for the function often go in data for POST\r\n+           'notificationid': notificationId,\r\n+           'timeread': DateTime.now().millisecondsSinceEpoch ~/ 1000, // Current time as read time\r\n+        }\r\n       );\r\n \r\n-      return response.data['notifications'] ?? [];\r\n+      if (response.statusCode == 200 && response.data is Map) {\r\n+         // Check for a success indicator or absence of error in the response\r\n+         // Moodle APIs often return a status or warning array. An empty warning array usually means success.\r\n+         if (response.data['warnings'] == null || (response.data['warnings'] as List).isEmpty) {\r\n+            developer.log('Successfully marked notification $notificationId as read.', name: 'ApiService');\r\n+            return true;\r\n+         } else {\r\n+            developer.log('API Warnings marking notification read: ${response.data['warnings']}', name: 'ApiService');\r\n+            // Decide if warnings should count as failure\r\n+            return false; // Or true depending on severity\r\n+         }\r\n+      } else {\r\n+         developer.log('Failed to mark notification read: Status code ${response.statusCode}, Data: ${response.data}', name: 'ApiService');\r\n+         return false;\r\n+      }\r\n     } catch (e) {\r\n-      print('Error trying alternative notification APIs: $e');\r\n-      return [];\r\n+      developer.log('Error marking notification read: $e', name: 'ApiService', error: e);\r\n+      return false;\r\n     }\r\n   }\r\n \r\n   Future<Map<String, dynamic>> getDiscussions(String baseUrl, String token, int discussionId) async {\r\n"
                },
                {
                    "date": 1744385726212,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,47 +196,52 @@\n       final response = await _dio.get(\r\n         \"$baseUrl/webservice/rest/server.php\",\r\n         queryParameters: {\r\n           'wstoken': token,\r\n-          // Use the function available in your API list and commonly used by the app\r\n           'wsfunction': 'message_popup_get_popup_notifications',\r\n           'moodlewsrestformat': 'json',\r\n-          'useridto': userId, // This parameter is correct for this function\r\n-          'limitnum': 50,  // Fetch more notifications\r\n-          'newestfirst': 1, // Usually want newest first\r\n-          // 'read': 0, // You could use this to fetch only unread (0) or read (1)\r\n+          'useridto': userId,\r\n+          // --- REMOVED Optional Parameters ---\r\n+          // 'limitnum': 50,\r\n+          // 'newestfirst': 1,\r\n         },\r\n       );\r\n \r\n-      // The response itself is usually a Map, containing the list\r\n+      // --- ADDED Moodle Error Check ---\r\n       if (response.statusCode == 200 && response.data is Map<String, dynamic>) {\r\n+        final responseData = response.data as Map<String, dynamic>;\r\n+        // Check if the response contains a Moodle exception key\r\n+        if (responseData.containsKey('exception')) {\r\n+          developer.log('Moodle API Error received: ${responseData['message']} (${responseData['errorcode']})', name: 'ApiService', level: 1000);\r\n+          throw Exception('API Error: ${responseData['message']} (${responseData['errorcode']})');\r\n+        }\r\n+        // If no exception key, assume success\r\n         developer.log('Successfully fetched notifications data.', name: 'ApiService');\r\n-        return response.data;\r\n+        return responseData;\r\n       } else {\r\n          developer.log('Failed to get notifications: Status code ${response.statusCode}, Data type: ${response.data.runtimeType}', name: 'ApiService');\r\n-         // Check for Moodle specific error structure\r\n-         if (response.data is Map && response.data.containsKey('exception')) {\r\n-            throw Exception('API Error: ${response.data['message']} (${response.data['errorcode']})');\r\n-         }\r\n          throw Exception('Failed to get notifications: Invalid response format or status code ${response.statusCode}');\r\n       }\r\n \r\n     } on DioException catch (e) {\r\n         developer.log('DioError fetching notifications: ${e.message}', name: 'ApiService', error: e, stackTrace: e.stackTrace);\r\n         developer.log('DioError Response: ${e.response?.data}', name: 'ApiService');\r\n-        // Provide a more informative error message\r\n         String errorMsg = 'Network error fetching notifications.';\r\n         if (e.response?.data is Map && e.response!.data.containsKey('message')) {\r\n+          // Try to extract Moodle error message from DioError response as well\r\n           errorMsg = 'API Error: ${e.response!.data['message']}';\r\n         } else if (e.message != null) {\r\n           errorMsg = 'Network error: ${e.message}';\r\n         }\r\n         throw Exception(errorMsg);\r\n     } catch (e, s) {\r\n       developer.log('Error fetching notifications: $e', name: 'ApiService', error: e, stackTrace: s);\r\n-      // Return an empty map or throw, depending on how you want to handle errors upstream\r\n-      // Throwing is generally better to indicate failure clearly\r\n-      throw Exception('An unexpected error occurred while fetching notifications.');\r\n+      // If the error was the Moodle exception we threw above, re-throw it\r\n+      if (e is Exception && e.toString().contains('API Error:')) {\r\n+          throw e;\r\n+      }\r\n+      // Otherwise, wrap it\r\n+      throw Exception('An unexpected error occurred while fetching notifications: ${e.toString()}');\r\n     }\r\n   }\r\n \r\n    // --- Add function to mark notification as read ---\r\n"
                },
                {
                    "date": 1744386551169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n class ApiService {\r\n   final Dio _dio = Dio();\r\n   // Let's assume we want mocking only in debug mode\r\n   // You can set this based on your build environment if needed\r\n-  static const bool kDebugMode = true; // Or use Foundation's kDebugMode\r\n+  static const bool kDebugMode = false; // Or use Foundation's kDebugMode\r\n \r\n   ApiService() {\r\n     // Add logging interceptor to see request/response details easily\r\n     _dio.interceptors.add(LogInterceptor(\r\n"
                },
                {
                    "date": 1744386667343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,11 +14,10 @@\n       responseBody: true,\r\n       logPrint: (o) => developer.log(o.toString(), name: 'ApiServiceDio'),\r\n     ));\r\n \r\n-    // --- Mock Interceptor (Optional - Use carefully for debugging) ---\r\n-    // Let's comment this out for now to test the REAL API first.\r\n-    // If you need mocking later, make sure the wsfunction matches the one in getNotifications.\r\n+    // --- Mock Interceptor (Use carefully for debugging) ---\r\n+    // make sure the wsfunction matches the one in getNotifications.\r\n     /*\r\n     if (kDebugMode) {\r\n       _dio.interceptors.add(InterceptorsWrapper(\r\n         onRequest: (options, handler) {\r\n"
                }
            ],
            "date": 1742123178345,
            "name": "Commit-0",
            "content": "import 'package:dio/dio.dart';\r\n\r\nclass ApiService {\r\n  final Dio _dio = Dio();\r\n\r\n  Future<bool> validateMoodleUrl(String url) async {\r\n    try {\r\n      final response = await _dio.get(url);\r\n      return response.statusCode == 200;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  }\r\n}"
        }
    ]
}